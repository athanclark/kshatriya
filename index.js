// Generated by psc-bundle 0.10.7
var PS = {};
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports["Semigroupoid"] = Semigroupoid;
  exports["compose"] = compose;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS["Control.Semigroupoid"] = PS["Control.Semigroupoid"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Category = function (Semigroupoid0, id) {
      this.Semigroupoid0 = Semigroupoid0;
      this.id = id;
  };
  var id = function (dict) {
      return dict.id;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["Category"] = Category;
  exports["id"] = id;
  exports["categoryFn"] = categoryFn;
})(PS["Control.Category"] = PS["Control.Category"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var Control_Category = PS["Control.Category"];
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["const"] = $$const;
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
    "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var $foreign = PS["Data.Show"];     
  var Show = function (show) {
      this.show = show;
  };                                             
  var showBoolean = new Show(function (v) {
      if (v) {
          return "true";
      };
      if (!v) {
          return "false";
      };
      throw new Error("Failed pattern match at Data.Show line 13, column 3 - line 14, column 3: " + [ v.constructor.name ]);
  });
  var show = function (dict) {
      return dict.show;
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showBoolean"] = showBoolean;
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var $foreign = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  exports["unit"] = $foreign.unit;
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var $foreign = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];        
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["void"] = $$void;
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var $foreign = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];        
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["liftA1"] = liftA1;
  exports["pure"] = pure;
})(PS["Control.Applicative"] = PS["Control.Applicative"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var $foreign = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS["Control.Monad"] = PS["Control.Monad"] || {});
(function(exports) {
    "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };

  exports.runPure = function (f) {
    return f();
  };
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var monadEff = new Control_Monad.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Control_Bind.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Control_Apply.Apply(function () {
      return functorEff;
  }, Control_Monad.ap(monadEff));
  var applicativeEff = new Control_Applicative.Applicative(function () {
      return applyEff;
  }, $foreign.pureE);
  var functorEff = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;
  exports["runPure"] = $foreign.runPure;
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
    "use strict";

  exports.log = function (s) {
    return function () {
      console.log(s);
      return {};
    };
  };
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  exports["log"] = $foreign.log;
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
    "use strict";

  exports.now = function () {
    return Date.now();
  };
})(PS["Control.Monad.Eff.Now"] = PS["Control.Monad.Eff.Now"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS["Data.Boolean"] = PS["Data.Boolean"] || {});
(function(exports) {
    "use strict";

  exports.refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var $foreign = PS["Data.Eq"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Eq = function (eq) {
      this.eq = eq;
  }; 
  var eqString = new Eq($foreign.refEq);
  var eq = function (dict) {
      return dict.eq;
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["eqString"] = eqString;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
    "use strict";

  // module Data.Generic

  exports.zipAll = function (f) {
    return function (xs) {
      return function (ys) {
        var l = xs.length < ys.length ? xs.length : ys.length;
        for (var i = 0; i < l; i++) {
          if (!f(xs[i])(ys[i])) {
            return false;
          }
        }
        return true;
      };
    };
  };
})(PS["Data.Generic"] = PS["Data.Generic"] || {});
(function(exports) {
    "use strict";

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Sorting ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.sortImpl = function (f) {
    return function (l) {
      // jshint maxparams: 2
      return l.slice().sort(function (x, y) {
        return f(x)(y);
      });
    };
  };

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
    "use strict";

  exports.boolConj = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolDisj = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var $foreign = PS["Data.HeytingAlgebra"];
  var Data_Unit = PS["Data.Unit"];        
  var HeytingAlgebra = function (conj, disj, ff, implies, not, tt) {
      this.conj = conj;
      this.disj = disj;
      this.ff = ff;
      this.implies = implies;
      this.not = not;
      this.tt = tt;
  };
  var tt = function (dict) {
      return dict.tt;
  };
  var not = function (dict) {
      return dict.not;
  };
  var implies = function (dict) {
      return dict.implies;
  };                 
  var ff = function (dict) {
      return dict.ff;
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var heytingAlgebraBoolean = new HeytingAlgebra($foreign.boolConj, $foreign.boolDisj, false, function (a) {
      return function (b) {
          return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
      };
  }, $foreign.boolNot, true);
  var conj = function (dict) {
      return dict.conj;
  };
  exports["HeytingAlgebra"] = HeytingAlgebra;
  exports["conj"] = conj;
  exports["disj"] = disj;
  exports["ff"] = ff;
  exports["implies"] = implies;
  exports["not"] = not;
  exports["tt"] = tt;
  exports["heytingAlgebraBoolean"] = heytingAlgebraBoolean;
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function(exports) {
    "use strict";

  exports.unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];        
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
})(PS["Data.Ordering"] = PS["Data.Ordering"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var $foreign = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];        
  var unsafeCompare = $foreign.unsafeCompareImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value);
  exports["unsafeCompare"] = unsafeCompare;
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
    "use strict";

  exports.numSub = function (n1) {
    return function (n2) {
      return n1 - n2;
    };
  };
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
    "use strict";

  exports.numAdd = function (n1) {
    return function (n2) {
      return n1 + n2;
    };
  };

  exports.numMul = function (n1) {
    return function (n2) {
      return n1 * n2;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var $foreign = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];        
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };
  var zero = function (dict) {
      return dict.zero;
  };                                 
  var semiringNumber = new Semiring($foreign.numAdd, $foreign.numMul, 1.0, 0.0);
  var one = function (dict) {
      return dict.one;
  };
  var mul = function (dict) {
      return dict.mul;
  };
  var add = function (dict) {
      return dict.add;
  };
  exports["Semiring"] = Semiring;
  exports["add"] = add;
  exports["mul"] = mul;
  exports["one"] = one;
  exports["zero"] = zero;
  exports["semiringNumber"] = semiringNumber;
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var $foreign = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];        
  var Ring = function (Semiring0, sub) {
      this.Semiring0 = Semiring0;
      this.sub = sub;
  };
  var sub = function (dict) {
      return dict.sub;
  }; 
  var ringNumber = new Ring(function () {
      return Data_Semiring.semiringNumber;
  }, $foreign.numSub);
  exports["Ring"] = Ring;
  exports["sub"] = sub;
  exports["ringNumber"] = ringNumber;
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var $foreign = PS["Data.Ord"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Ord_Unsafe = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Ord = function (Eq0, compare) {
      this.Eq0 = Eq0;
      this.compare = compare;
  }; 
  var ordString = new Ord(function () {
      return Data_Eq.eqString;
  }, Data_Ord_Unsafe.unsafeCompare);
  var compare = function (dict) {
      return dict.compare;
  };
  exports["Ord"] = Ord;
  exports["compare"] = compare;
  exports["ordString"] = ordString;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Distributive = PS["Data.Distributive"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var Type_Equality = PS["Type.Equality"];        
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  exports["Tuple"] = Tuple;
})(PS["Data.Tuple"] = PS["Data.Tuple"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var $foreign = PS["Data.Array"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array_ST = PS["Data.Array.ST"];
  var Data_Array_ST_Iterator = PS["Data.Array.ST.Iterator"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var sortBy = function (comp) {
      return function (xs) {
          var comp$prime = function (x) {
              return function (y) {
                  var v = comp(x)(y);
                  if (v instanceof Data_Ordering.GT) {
                      return 1;
                  };
                  if (v instanceof Data_Ordering.EQ) {
                      return 0;
                  };
                  if (v instanceof Data_Ordering.LT) {
                      return -1 | 0;
                  };
                  throw new Error("Failed pattern match at Data.Array line 475, column 15 - line 480, column 1: " + [ v.constructor.name ]);
              };
          };
          return $foreign.sortImpl(comp$prime)(xs);
      };
  };
  exports["sortBy"] = sortBy;
  exports["length"] = $foreign.length;
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var $foreign = PS["Data.Generic"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Identity = PS["Data.Identity"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];
  var Prelude = PS["Prelude"];
  var Type_Proxy = PS["Type.Proxy"];        
  var SProd = (function () {
      function SProd(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SProd.create = function (value0) {
          return function (value1) {
              return new SProd(value0, value1);
          };
      };
      return SProd;
  })();
  var SRecord = (function () {
      function SRecord(value0) {
          this.value0 = value0;
      };
      SRecord.create = function (value0) {
          return new SRecord(value0);
      };
      return SRecord;
  })();
  var SNumber = (function () {
      function SNumber(value0) {
          this.value0 = value0;
      };
      SNumber.create = function (value0) {
          return new SNumber(value0);
      };
      return SNumber;
  })();
  var SBoolean = (function () {
      function SBoolean(value0) {
          this.value0 = value0;
      };
      SBoolean.create = function (value0) {
          return new SBoolean(value0);
      };
      return SBoolean;
  })();
  var SInt = (function () {
      function SInt(value0) {
          this.value0 = value0;
      };
      SInt.create = function (value0) {
          return new SInt(value0);
      };
      return SInt;
  })();
  var SString = (function () {
      function SString(value0) {
          this.value0 = value0;
      };
      SString.create = function (value0) {
          return new SString(value0);
      };
      return SString;
  })();
  var SChar = (function () {
      function SChar(value0) {
          this.value0 = value0;
      };
      SChar.create = function (value0) {
          return new SChar(value0);
      };
      return SChar;
  })();
  var SArray = (function () {
      function SArray(value0) {
          this.value0 = value0;
      };
      SArray.create = function (value0) {
          return new SArray(value0);
      };
      return SArray;
  })();
  var SUnit = (function () {
      function SUnit() {

      };
      SUnit.value = new SUnit();
      return SUnit;
  })();
  var SigProd = (function () {
      function SigProd(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SigProd.create = function (value0) {
          return function (value1) {
              return new SigProd(value0, value1);
          };
      };
      return SigProd;
  })();
  var Generic = function (fromSpine, toSignature, toSpine) {
      this.fromSpine = fromSpine;
      this.toSignature = toSignature;
      this.toSpine = toSpine;
  };
  var toSpine = function (dict) {
      return dict.toSpine;
  };
  var toSignature = function (dict) {
      return dict.toSignature;
  };                  
  var fromSpine = function (dict) {
      return dict.fromSpine;
  };
  var force = function (f) {
      return f(Data_Unit.unit);
  };                                                           
  var eqThunk = function (dictEq) {
      return function (x) {
          return function (y) {
              return Data_Eq.eq(dictEq)(force(x))(force(y));
          };
      };
  };
  var eqRecordSigs = function (dictEq) {
      return function (arr1) {
          return function (arr2) {
              var labelCompare = function (r1) {
                  return function (r2) {
                      return Data_Ord.compare(Data_Ord.ordString)(r1.recLabel)(r2.recLabel);
                  };
              };
              var sorted1 = Data_Array.sortBy(labelCompare)(arr1);
              var sorted2 = Data_Array.sortBy(labelCompare)(arr2);
              var doCmp = function (x) {
                  return function (y) {
                      return x.recLabel === y.recLabel && Data_Eq.eq(dictEq)(force(x.recValue))(force(y.recValue));
                  };
              };
              return Data_Array.length(arr1) === Data_Array.length(arr2) && $foreign.zipAll(doCmp)(sorted1)(sorted2);
          };
      };
  };
  var eqGenericSpine = new Data_Eq.Eq(function (v) {
      return function (v1) {
          if (v instanceof SProd && v1 instanceof SProd) {
              return v.value0 === v1.value0 && (Data_Array.length(v.value1) === Data_Array.length(v1.value1) && $foreign.zipAll(eqThunk(eqGenericSpine))(v.value1)(v1.value1));
          };
          if (v instanceof SRecord && v1 instanceof SRecord) {
              return eqRecordSigs(eqGenericSpine)(v.value0)(v1.value0);
          };
          if (v instanceof SNumber && v1 instanceof SNumber) {
              return v.value0 === v1.value0;
          };
          if (v instanceof SBoolean && v1 instanceof SBoolean) {
              return v.value0 === v1.value0;
          };
          if (v instanceof SInt && v1 instanceof SInt) {
              return v.value0 === v1.value0;
          };
          if (v instanceof SString && v1 instanceof SString) {
              return v.value0 === v1.value0;
          };
          if (v instanceof SChar && v1 instanceof SChar) {
              return v.value0 === v1.value0;
          };
          if (v instanceof SArray && v1 instanceof SArray) {
              return Data_Array.length(v.value0) === Data_Array.length(v1.value0) && $foreign.zipAll(eqThunk(eqGenericSpine))(v.value0)(v1.value0);
          };
          if (v instanceof SUnit && v1 instanceof SUnit) {
              return true;
          };
          return false;
      };
  });
  var gEq = function (dictGeneric) {
      return function (x) {
          return function (y) {
              return Data_Eq.eq(eqGenericSpine)(toSpine(dictGeneric)(x))(toSpine(dictGeneric)(y));
          };
      };
  };
  exports["SigProd"] = SigProd;
  exports["SProd"] = SProd;
  exports["SRecord"] = SRecord;
  exports["SNumber"] = SNumber;
  exports["SBoolean"] = SBoolean;
  exports["SInt"] = SInt;
  exports["SString"] = SString;
  exports["SChar"] = SChar;
  exports["SArray"] = SArray;
  exports["SUnit"] = SUnit;
  exports["Generic"] = Generic;
  exports["fromSpine"] = fromSpine;
  exports["gEq"] = gEq;
  exports["toSignature"] = toSignature;
  exports["toSpine"] = toSpine;
  exports["eqGenericSpine"] = eqGenericSpine;
})(PS["Data.Generic"] = PS["Data.Generic"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];           
  var ringMilliseconds = Data_Ring.ringNumber;
  exports["ringMilliseconds"] = ringMilliseconds;
})(PS["Data.Time.Duration"] = PS["Data.Time.Duration"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var $foreign = PS["Data.DateTime.Instant"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Date = PS["Data.Date"];
  var Data_Date_Component = PS["Data.Date.Component"];
  var Data_DateTime = PS["Data.DateTime"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Generic = PS["Data.Generic"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Time = PS["Data.Time"];
  var Data_Time_Component = PS["Data.Time.Component"];
  var Data_Time_Duration = PS["Data.Time.Duration"];
  var Data_Unit = PS["Data.Unit"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var unInstant = function (v) {
      return v;
  };
  exports["unInstant"] = unInstant;
})(PS["Data.DateTime.Instant"] = PS["Data.DateTime.Instant"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Now"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_DateTime = PS["Data.DateTime"];
  var Data_DateTime_Instant = PS["Data.DateTime.Instant"];
  var Data_DateTime_Locale = PS["Data.DateTime.Locale"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Time_Duration = PS["Data.Time.Duration"];
  var Prelude = PS["Prelude"];
  exports["now"] = $foreign.now;
})(PS["Control.Monad.Eff.Now"] = PS["Control.Monad.Eff.Now"] || {});
(function(exports) {
    "use strict";

  exports.newRef = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.readRef = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports["modifyRef'"] = function (ref) {
    return function (f) {
      return function () {
        var t = f(ref.value);
        ref.value = t.state;
        return t.value;
      };
    };
  };
})(PS["Control.Monad.Eff.Ref"] = PS["Control.Monad.Eff.Ref"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Ref"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var modifyRef = function (ref) {
      return function (f) {
          return $foreign["modifyRef'"](ref)(function (s) {
              return {
                  state: f(s), 
                  value: Data_Unit.unit
              };
          });
      };
  };
  exports["modifyRef"] = modifyRef;
  exports["newRef"] = $foreign.newRef;
  exports["readRef"] = $foreign.readRef;
})(PS["Control.Monad.Eff.Ref"] = PS["Control.Monad.Eff.Ref"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.setInterval = function (ms) {
    return function (fn) {
      return function () {
        return setInterval(fn, ms);
      };
    };
  };

  exports.clearInterval = function (id) {
    return function () {
      clearInterval(id);
    };
  };
})(PS["Control.Monad.Eff.Timer"] = PS["Control.Monad.Eff.Timer"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Timer"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Prelude = PS["Prelude"];
  exports["clearInterval"] = $foreign.clearInterval;
  exports["setInterval"] = $foreign.setInterval;
})(PS["Control.Monad.Eff.Timer"] = PS["Control.Monad.Eff.Timer"] || {});
(function(exports) {
    "use strict";

  exports.mkEffFn1 = function mkEffFn1(fn) {
    return function(x) {
      return fn(x)();
    };
  };

  exports.runEffFn1 = function runEffFn1(fn) {
    return function(a) {
      return function() {
        return fn(a);
      };
    };
  };

  exports.runEffFn2 = function runEffFn2(fn) {
    return function(a) {
      return function(b) {
        return function() {
          return fn(a, b);
        };
      };
    };
  };

  exports.runEffFn4 = function runEffFn4(fn) {
    return function(a) {
      return function(b) {
        return function(c) {
          return function(d) {
            return function() {
              return fn(a, b, c, d);
            };
          };
        };
      };
    };
  };
})(PS["Control.Monad.Eff.Uncurried"] = PS["Control.Monad.Eff.Uncurried"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Uncurried"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  exports["mkEffFn1"] = $foreign.mkEffFn1;
  exports["runEffFn1"] = $foreign.runEffFn1;
  exports["runEffFn2"] = $foreign.runEffFn2;
  exports["runEffFn4"] = $foreign.runEffFn4;
})(PS["Control.Monad.Eff.Uncurried"] = PS["Control.Monad.Eff.Uncurried"] || {});
(function(exports) {
    "use strict";

  function id(x) {
    return x;
  } 

  exports.fromBoolean = id;
  exports.fromNumber = id;
  exports.fromString = id;
  exports.fromObject = id;

  exports.stringify = function (j) {
    return JSON.stringify(j);
  };

  var objToString = Object.prototype.toString;

  function isArray(a) {
    return objToString.call(a) === "[object Array]";
  }

  exports._foldJson = function (isNull, isBool, isNum, isStr, isArr, isObj, j) {
    if (j == null) return isNull(null);
    else if (typeof j === "boolean") return isBool(j);
    else if (typeof j === "number") return isNum(j);
    else if (typeof j === "string") return isStr(j);
    else if (objToString.call(j) === "[object Array]")
      return isArr(j);
    else return isObj(j);
  };
})(PS["Data.Argonaut.Core"] = PS["Data.Argonaut.Core"] || {});
(function(exports) {
    "use strict";

  exports._copyEff = function (m) {
    return function () {
      var r = {};
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          r[k] = m[k];
        }
      }
      return r;
    };
  };

  exports.empty = {};

  exports.runST = function (f) {
    return f;
  };

  function toArrayWithKey(f) {
    return function (m) {
      var r = [];
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          r.push(f(k)(m[k]));
        }
      }
      return r;
    };
  }
})(PS["Data.StrMap"] = PS["Data.StrMap"] || {});
(function(exports) {
    "use strict";

  exports["new"] = function () {
    return {};
  };

  exports.poke = function (m) {
    return function (k) {
      return function (v) {
        return function () {
          m[k] = v;
          return m;
        };
      };
    };
  };
})(PS["Data.StrMap.ST"] = PS["Data.StrMap.ST"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var $foreign = PS["Data.StrMap.ST"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Maybe = PS["Data.Maybe"];
  exports["new"] = $foreign["new"];
  exports["poke"] = $foreign.poke;
})(PS["Data.StrMap.ST"] = PS["Data.StrMap.ST"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var $foreign = PS["Data.StrMap"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_StrMap_ST = PS["Data.StrMap.ST"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Prelude = PS["Prelude"];                                   
  var thawST = $foreign._copyEff;
  var pureST = function (f) {
      return Control_Monad_Eff.runPure($foreign.runST(f));
  };
  var singleton = function (k) {
      return function (v) {
          return pureST(function __do() {
              var v1 = Data_StrMap_ST["new"]();
              return Data_StrMap_ST.poke(v1)(k)(v)();
          });
      };
  };
  var mutate = function (f) {
      return function (m) {
          return pureST(function __do() {
              var v = thawST(m)();
              var v1 = f(v)();
              return v;
          });
      };
  }; 
  var insert = function (k) {
      return function (v) {
          return mutate(function (s) {
              return Data_Functor["void"](Control_Monad_Eff.functorEff)(Data_StrMap_ST.poke(s)(k)(v));
          });
      };
  };
  exports["insert"] = insert;
  exports["pureST"] = pureST;
  exports["singleton"] = singleton;
  exports["thawST"] = thawST;
  exports["empty"] = $foreign.empty;
})(PS["Data.StrMap"] = PS["Data.StrMap"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var $foreign = PS["Data.Argonaut.Core"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Show = PS["Data.Show"];
  var Data_StrMap = PS["Data.StrMap"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];                                        
  var showJson = new Data_Show.Show($foreign.stringify);
  var jsonSingletonObject = function (key) {
      return function (val) {
          return $foreign.fromObject(Data_StrMap.singleton(key)(val));
      };
  };                                            
  var jsonEmptyObject = $foreign.fromObject(Data_StrMap.empty);
  var foldJsonObject = function (d) {
      return function (f) {
          return function (j) {
              return $foreign._foldJson(Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), f, j);
          };
      };
  };
  exports["foldJsonObject"] = foldJsonObject;
  exports["jsonEmptyObject"] = jsonEmptyObject;
  exports["jsonSingletonObject"] = jsonSingletonObject;
  exports["showJson"] = showJson;
  exports["fromBoolean"] = $foreign.fromBoolean;
  exports["fromNumber"] = $foreign.fromNumber;
  exports["fromObject"] = $foreign.fromObject;
  exports["fromString"] = $foreign.fromString;
})(PS["Data.Argonaut.Core"] = PS["Data.Argonaut.Core"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Int = PS["Data.Int"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Map = PS["Data.Map"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_StrMap = PS["Data.StrMap"];
  var Data_String = PS["Data.String"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Void = PS["Data.Void"];
  var Prelude = PS["Prelude"];        
  var EncodeJson = function (encodeJson) {
      this.encodeJson = encodeJson;
  };                                                                                       
  var encodeJsonJson = new EncodeJson(Control_Category.id(Control_Category.categoryFn));
  var encodeJsonJString = new EncodeJson(Data_Argonaut_Core.fromString);
  var encodeJsonJNumber = new EncodeJson(Data_Argonaut_Core.fromNumber);
  var encodeJsonJBoolean = new EncodeJson(Data_Argonaut_Core.fromBoolean);
  var encodeJson = function (dict) {
      return dict.encodeJson;
  };
  exports["EncodeJson"] = EncodeJson;
  exports["encodeJson"] = encodeJson;
  exports["encodeJsonJBoolean"] = encodeJsonJBoolean;
  exports["encodeJsonJNumber"] = encodeJsonJNumber;
  exports["encodeJsonJString"] = encodeJsonJString;
  exports["encodeJsonJson"] = encodeJsonJson;
})(PS["Data.Argonaut.Encode.Class"] = PS["Data.Argonaut.Encode.Class"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_Argonaut_Encode_Class = PS["Data.Argonaut.Encode.Class"];
  var Data_StrMap = PS["Data.StrMap"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];        
  var extend = function (dictEncodeJson) {
      return function (v) {
          return function ($6) {
              return Data_Argonaut_Core.foldJsonObject(Data_Argonaut_Core.jsonSingletonObject(v.value0)(v.value1))(function ($7) {
                  return Data_Argonaut_Core.fromObject(Data_StrMap.insert(v.value0)(v.value1)($7));
              })(Data_Argonaut_Encode_Class.encodeJson(dictEncodeJson)($6));
          };
      };
  };
  var assoc = function (dictEncodeJson) {
      return function (k) {
          return function ($8) {
              return Data_Tuple.Tuple.create(k)(Data_Argonaut_Encode_Class.encodeJson(dictEncodeJson)($8));
          };
      };
  };
  exports["assoc"] = assoc;
  exports["extend"] = extend;
})(PS["Data.Argonaut.Encode.Combinators"] = PS["Data.Argonaut.Encode.Combinators"] || {});
(function(exports) {
    "use strict";
  var rpio =require("rpio");

  exports.openWriteImpl = function openWriteImpl (pin, def) {
    rpio.open(pin, rpio.OUTPUT, def ? rpio.HIGH : rpio.LOW);
  };

  exports.readPinImpl = function readPinImpl (pin) {
    var v = rpio.read(pin);

    if (v === 1) {
      return true;
    } else if (v === 0) {
      return false;
    } else {
      console.error("Strange return type from rpio.read():", v);
    }
  };

  exports.writePinImpl = function writePinImpl (pin, val) {
    rpio.write(pin, val ? rpio.HIGH : rpio.LOW);
  };

  exports.listenImpl = function listenImpl (pin, f) {
    rpio.open(pin, rpio.INPUT, rpio.PULL_DOWN);
    rpio.poll(pin, f);
  };
})(PS["GPIO"] = PS["GPIO"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var $foreign = PS["GPIO"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Uncurried = PS["Control.Monad.Eff.Uncurried"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Maybe = PS["Data.Maybe"];
  var Prelude = PS["Prelude"];        
  var GPIO4 = (function () {
      function GPIO4() {

      };
      GPIO4.value = new GPIO4();
      return GPIO4;
  })();
  var GPIO5 = (function () {
      function GPIO5() {

      };
      GPIO5.value = new GPIO5();
      return GPIO5;
  })();
  var GPIO6 = (function () {
      function GPIO6() {

      };
      GPIO6.value = new GPIO6();
      return GPIO6;
  })();
  var GPIO12 = (function () {
      function GPIO12() {

      };
      GPIO12.value = new GPIO12();
      return GPIO12;
  })();
  var GPIO13 = (function () {
      function GPIO13() {

      };
      GPIO13.value = new GPIO13();
      return GPIO13;
  })();
  var GPIO16 = (function () {
      function GPIO16() {

      };
      GPIO16.value = new GPIO16();
      return GPIO16;
  })();
  var GPIO17 = (function () {
      function GPIO17() {

      };
      GPIO17.value = new GPIO17();
      return GPIO17;
  })();
  var GPIO18 = (function () {
      function GPIO18() {

      };
      GPIO18.value = new GPIO18();
      return GPIO18;
  })();
  var GPIO19 = (function () {
      function GPIO19() {

      };
      GPIO19.value = new GPIO19();
      return GPIO19;
  })();
  var GPIO20 = (function () {
      function GPIO20() {

      };
      GPIO20.value = new GPIO20();
      return GPIO20;
  })();
  var GPIO21 = (function () {
      function GPIO21() {

      };
      GPIO21.value = new GPIO21();
      return GPIO21;
  })();
  var GPIO22 = (function () {
      function GPIO22() {

      };
      GPIO22.value = new GPIO22();
      return GPIO22;
  })();
  var GPIO23 = (function () {
      function GPIO23() {

      };
      GPIO23.value = new GPIO23();
      return GPIO23;
  })();
  var GPIO24 = (function () {
      function GPIO24() {

      };
      GPIO24.value = new GPIO24();
      return GPIO24;
  })();
  var GPIO25 = (function () {
      function GPIO25() {

      };
      GPIO25.value = new GPIO25();
      return GPIO25;
  })();
  var GPIO26 = (function () {
      function GPIO26() {

      };
      GPIO26.value = new GPIO26();
      return GPIO26;
  })();
  var GPIO27 = (function () {
      function GPIO27() {

      };
      GPIO27.value = new GPIO27();
      return GPIO27;
  })();
  var toPin = function (v) {
      if (v instanceof GPIO4) {
          return 7;
      };
      if (v instanceof GPIO5) {
          return 29;
      };
      if (v instanceof GPIO6) {
          return 31;
      };
      if (v instanceof GPIO12) {
          return 32;
      };
      if (v instanceof GPIO13) {
          return 33;
      };
      if (v instanceof GPIO16) {
          return 36;
      };
      if (v instanceof GPIO17) {
          return 11;
      };
      if (v instanceof GPIO18) {
          return 12;
      };
      if (v instanceof GPIO19) {
          return 35;
      };
      if (v instanceof GPIO20) {
          return 38;
      };
      if (v instanceof GPIO21) {
          return 40;
      };
      if (v instanceof GPIO22) {
          return 15;
      };
      if (v instanceof GPIO23) {
          return 16;
      };
      if (v instanceof GPIO24) {
          return 18;
      };
      if (v instanceof GPIO25) {
          return 22;
      };
      if (v instanceof GPIO26) {
          return 37;
      };
      if (v instanceof GPIO27) {
          return 13;
      };
      throw new Error("Failed pattern match at GPIO line 50, column 9 - line 69, column 1: " + [ v.constructor.name ]);
  };
  var write = function (pin) {
      return function (val) {
          return Control_Monad_Eff_Uncurried.runEffFn2($foreign.writePinImpl)(toPin(pin))(val);
      };
  };                                                                    
  var read = function (pin) {
      return Control_Monad_Eff_Uncurried.runEffFn1($foreign.readPinImpl)(toPin(pin));
  };
  var openWrite = function (pin) {
      return function (val) {
          return Control_Monad_Eff_Uncurried.runEffFn2($foreign.openWriteImpl)(toPin(pin))(val);
      };
  };
  var genericGPIOPin = new Data_Generic.Generic(function (v) {
      if (v instanceof Data_Generic.SProd && (v.value0 === "GPIO.GPIO4" && v.value1.length === 0)) {
          return new Data_Maybe.Just(GPIO4.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "GPIO.GPIO5" && v.value1.length === 0)) {
          return new Data_Maybe.Just(GPIO5.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "GPIO.GPIO6" && v.value1.length === 0)) {
          return new Data_Maybe.Just(GPIO6.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "GPIO.GPIO12" && v.value1.length === 0)) {
          return new Data_Maybe.Just(GPIO12.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "GPIO.GPIO13" && v.value1.length === 0)) {
          return new Data_Maybe.Just(GPIO13.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "GPIO.GPIO16" && v.value1.length === 0)) {
          return new Data_Maybe.Just(GPIO16.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "GPIO.GPIO17" && v.value1.length === 0)) {
          return new Data_Maybe.Just(GPIO17.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "GPIO.GPIO18" && v.value1.length === 0)) {
          return new Data_Maybe.Just(GPIO18.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "GPIO.GPIO19" && v.value1.length === 0)) {
          return new Data_Maybe.Just(GPIO19.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "GPIO.GPIO20" && v.value1.length === 0)) {
          return new Data_Maybe.Just(GPIO20.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "GPIO.GPIO21" && v.value1.length === 0)) {
          return new Data_Maybe.Just(GPIO21.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "GPIO.GPIO22" && v.value1.length === 0)) {
          return new Data_Maybe.Just(GPIO22.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "GPIO.GPIO23" && v.value1.length === 0)) {
          return new Data_Maybe.Just(GPIO23.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "GPIO.GPIO24" && v.value1.length === 0)) {
          return new Data_Maybe.Just(GPIO24.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "GPIO.GPIO25" && v.value1.length === 0)) {
          return new Data_Maybe.Just(GPIO25.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "GPIO.GPIO26" && v.value1.length === 0)) {
          return new Data_Maybe.Just(GPIO26.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "GPIO.GPIO27" && v.value1.length === 0)) {
          return new Data_Maybe.Just(GPIO27.value);
      };
      return Data_Maybe.Nothing.value;
  }, function ($dollarq) {
      return new Data_Generic.SigProd("GPIO.GPIOPin", [ {
          sigConstructor: "GPIO.GPIO4", 
          sigValues: [  ]
      }, {
          sigConstructor: "GPIO.GPIO5", 
          sigValues: [  ]
      }, {
          sigConstructor: "GPIO.GPIO6", 
          sigValues: [  ]
      }, {
          sigConstructor: "GPIO.GPIO12", 
          sigValues: [  ]
      }, {
          sigConstructor: "GPIO.GPIO13", 
          sigValues: [  ]
      }, {
          sigConstructor: "GPIO.GPIO16", 
          sigValues: [  ]
      }, {
          sigConstructor: "GPIO.GPIO17", 
          sigValues: [  ]
      }, {
          sigConstructor: "GPIO.GPIO18", 
          sigValues: [  ]
      }, {
          sigConstructor: "GPIO.GPIO19", 
          sigValues: [  ]
      }, {
          sigConstructor: "GPIO.GPIO20", 
          sigValues: [  ]
      }, {
          sigConstructor: "GPIO.GPIO21", 
          sigValues: [  ]
      }, {
          sigConstructor: "GPIO.GPIO22", 
          sigValues: [  ]
      }, {
          sigConstructor: "GPIO.GPIO23", 
          sigValues: [  ]
      }, {
          sigConstructor: "GPIO.GPIO24", 
          sigValues: [  ]
      }, {
          sigConstructor: "GPIO.GPIO25", 
          sigValues: [  ]
      }, {
          sigConstructor: "GPIO.GPIO26", 
          sigValues: [  ]
      }, {
          sigConstructor: "GPIO.GPIO27", 
          sigValues: [  ]
      } ]);
  }, function (v) {
      if (v instanceof GPIO4) {
          return new Data_Generic.SProd("GPIO.GPIO4", [  ]);
      };
      if (v instanceof GPIO5) {
          return new Data_Generic.SProd("GPIO.GPIO5", [  ]);
      };
      if (v instanceof GPIO6) {
          return new Data_Generic.SProd("GPIO.GPIO6", [  ]);
      };
      if (v instanceof GPIO12) {
          return new Data_Generic.SProd("GPIO.GPIO12", [  ]);
      };
      if (v instanceof GPIO13) {
          return new Data_Generic.SProd("GPIO.GPIO13", [  ]);
      };
      if (v instanceof GPIO16) {
          return new Data_Generic.SProd("GPIO.GPIO16", [  ]);
      };
      if (v instanceof GPIO17) {
          return new Data_Generic.SProd("GPIO.GPIO17", [  ]);
      };
      if (v instanceof GPIO18) {
          return new Data_Generic.SProd("GPIO.GPIO18", [  ]);
      };
      if (v instanceof GPIO19) {
          return new Data_Generic.SProd("GPIO.GPIO19", [  ]);
      };
      if (v instanceof GPIO20) {
          return new Data_Generic.SProd("GPIO.GPIO20", [  ]);
      };
      if (v instanceof GPIO21) {
          return new Data_Generic.SProd("GPIO.GPIO21", [  ]);
      };
      if (v instanceof GPIO22) {
          return new Data_Generic.SProd("GPIO.GPIO22", [  ]);
      };
      if (v instanceof GPIO23) {
          return new Data_Generic.SProd("GPIO.GPIO23", [  ]);
      };
      if (v instanceof GPIO24) {
          return new Data_Generic.SProd("GPIO.GPIO24", [  ]);
      };
      if (v instanceof GPIO25) {
          return new Data_Generic.SProd("GPIO.GPIO25", [  ]);
      };
      if (v instanceof GPIO26) {
          return new Data_Generic.SProd("GPIO.GPIO26", [  ]);
      };
      if (v instanceof GPIO27) {
          return new Data_Generic.SProd("GPIO.GPIO27", [  ]);
      };
      throw new Error("Failed pattern match at GPIO line 40, column 1 - line 40, column 50: " + [ v.constructor.name ]);
  });
  var fromPin = function (pin) {
      if (pin === 7) {
          return GPIO4.value;
      };
      if (pin === 29) {
          return GPIO5.value;
      };
      if (pin === 31) {
          return GPIO6.value;
      };
      if (pin === 32) {
          return GPIO12.value;
      };
      if (pin === 33) {
          return GPIO13.value;
      };
      if (pin === 36) {
          return GPIO16.value;
      };
      if (pin === 11) {
          return GPIO17.value;
      };
      if (pin === 12) {
          return GPIO18.value;
      };
      if (pin === 35) {
          return GPIO19.value;
      };
      if (pin === 38) {
          return GPIO20.value;
      };
      if (pin === 40) {
          return GPIO21.value;
      };
      if (pin === 15) {
          return GPIO22.value;
      };
      if (pin === 16) {
          return GPIO23.value;
      };
      if (pin === 18) {
          return GPIO24.value;
      };
      if (pin === 22) {
          return GPIO25.value;
      };
      if (pin === 37) {
          return GPIO26.value;
      };
      if (pin === 13) {
          return GPIO27.value;
      };
      if (Data_Boolean.otherwise) {
          return GPIO27.value;
      };
      throw new Error("Failed pattern match at GPIO line 70, column 1 - line 88, column 23: " + [ pin.constructor.name ]);
  };
  var listen = function (pin) {
      return function (f) {
          return Control_Monad_Eff_Uncurried.runEffFn2($foreign.listenImpl)(toPin(pin))(Control_Monad_Eff_Uncurried.mkEffFn1(function ($41) {
              return f(fromPin($41));
          }));
      };
  };
  var eqGPIOPin = new Data_Eq.Eq(Data_Generic.gEq(genericGPIOPin));
  exports["GPIO4"] = GPIO4;
  exports["GPIO5"] = GPIO5;
  exports["GPIO6"] = GPIO6;
  exports["GPIO12"] = GPIO12;
  exports["GPIO13"] = GPIO13;
  exports["GPIO16"] = GPIO16;
  exports["GPIO17"] = GPIO17;
  exports["GPIO18"] = GPIO18;
  exports["GPIO19"] = GPIO19;
  exports["GPIO20"] = GPIO20;
  exports["GPIO21"] = GPIO21;
  exports["GPIO22"] = GPIO22;
  exports["GPIO23"] = GPIO23;
  exports["GPIO24"] = GPIO24;
  exports["GPIO25"] = GPIO25;
  exports["GPIO26"] = GPIO26;
  exports["GPIO27"] = GPIO27;
  exports["listen"] = listen;
  exports["openWrite"] = openWrite;
  exports["read"] = read;
  exports["write"] = write;
  exports["genericGPIOPin"] = genericGPIOPin;
  exports["eqGPIOPin"] = eqGPIOPin;
})(PS["GPIO"] = PS["GPIO"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var GPIO = PS["GPIO"];
  var Prelude = PS["Prelude"];        
  var WheelSig = (function () {
      function WheelSig() {

      };
      WheelSig.value = new WheelSig();
      return WheelSig;
  })();
  var TurnSigL = (function () {
      function TurnSigL() {

      };
      TurnSigL.value = new TurnSigL();
      return TurnSigL;
  })();
  var TurnSigR = (function () {
      function TurnSigR() {

      };
      TurnSigR.value = new TurnSigR();
      return TurnSigR;
  })();
  var TurnL = (function () {
      function TurnL() {

      };
      TurnL.value = new TurnL();
      return TurnL;
  })();
  var TurnR = (function () {
      function TurnR() {

      };
      TurnR.value = new TurnR();
      return TurnR;
  })();
  var LoSig = (function () {
      function LoSig() {

      };
      LoSig.value = new LoSig();
      return LoSig;
  })();
  var Lo = (function () {
      function Lo() {

      };
      Lo.value = new Lo();
      return Lo;
  })();
  var BrakeSig = (function () {
      function BrakeSig() {

      };
      BrakeSig.value = new BrakeSig();
      return BrakeSig;
  })();
  var BrakeL = (function () {
      function BrakeL() {

      };
      BrakeL.value = new BrakeL();
      return BrakeL;
  })();
  var BrakeR = (function () {
      function BrakeR() {

      };
      BrakeR.value = new BrakeR();
      return BrakeR;
  })();
  var GPIOPinAble = function (toGPIOPin) {
      this.toGPIOPin = toGPIOPin;
  };
  var wheelSigGPIOPinAble = new GPIOPinAble(function (v) {
      return GPIO.GPIO16.value;
  });
  var wheelRadius = 0.328;
  var turnSigGPIOPinAble = new GPIOPinAble(function (v) {
      if (v instanceof TurnSigL) {
          return GPIO.GPIO26.value;
      };
      if (v instanceof TurnSigR) {
          return GPIO.GPIO20.value;
      };
      throw new Error("Failed pattern match at Kshatriya line 50, column 3 - line 50, column 30: " + [ v.constructor.name ]);
  });
  var turnGPIOPinAble = new GPIOPinAble(function (v) {
      if (v instanceof TurnL) {
          return GPIO.GPIO17.value;
      };
      if (v instanceof TurnR) {
          return GPIO.GPIO18.value;
      };
      throw new Error("Failed pattern match at Kshatriya line 38, column 3 - line 38, column 27: " + [ v.constructor.name ]);
  });
  var toGPIOPin = function (dict) {
      return dict.toGPIOPin;
  };
  var loSigGPIOPinAble = new GPIOPinAble(function (v) {
      return GPIO.GPIO21.value;
  });
  var loGPIOPinAble = new GPIOPinAble(function (v) {
      return GPIO.GPIO4.value;
  });
  var brakeSigGPIOPinAble = new GPIOPinAble(function (v) {
      return GPIO.GPIO19.value;
  });
  var brakeGPIOPinAble = new GPIOPinAble(function (v) {
      if (v instanceof BrakeL) {
          return GPIO.GPIO27.value;
      };
      if (v instanceof BrakeR) {
          return GPIO.GPIO22.value;
      };
      throw new Error("Failed pattern match at Kshatriya line 42, column 3 - line 42, column 28: " + [ v.constructor.name ]);
  });
  exports["BrakeL"] = BrakeL;
  exports["BrakeR"] = BrakeR;
  exports["BrakeSig"] = BrakeSig;
  exports["Lo"] = Lo;
  exports["LoSig"] = LoSig;
  exports["TurnL"] = TurnL;
  exports["TurnR"] = TurnR;
  exports["TurnSigL"] = TurnSigL;
  exports["TurnSigR"] = TurnSigR;
  exports["WheelSig"] = WheelSig;
  exports["GPIOPinAble"] = GPIOPinAble;
  exports["toGPIOPin"] = toGPIOPin;
  exports["wheelRadius"] = wheelRadius;
  exports["loGPIOPinAble"] = loGPIOPinAble;
  exports["turnGPIOPinAble"] = turnGPIOPinAble;
  exports["brakeGPIOPinAble"] = brakeGPIOPinAble;
  exports["loSigGPIOPinAble"] = loSigGPIOPinAble;
  exports["turnSigGPIOPinAble"] = turnSigGPIOPinAble;
  exports["brakeSigGPIOPinAble"] = brakeSigGPIOPinAble;
  exports["wheelSigGPIOPinAble"] = wheelSigGPIOPinAble;
})(PS["Kshatriya"] = PS["Kshatriya"] || {});
(function(exports) {
    "use strict";              

  exports.pi = Math.PI;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var $foreign = PS["Math"];
  exports["pi"] = $foreign.pi;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
    "use strict";

  var app = require('express')();
  var http =require("http");
  var WebSocket =require("ws");
  var cors =require("cors"); 

  app.use(cors());


  exports.engageServerImpl = function engageServerImpl (port, onServe, onMessage, websocket) {
    app.get("/",function (req,resp) {
      resp.sendFile(__dirname + "/frontend/index.html");
    });
    app.get("/index.js",function (req,resp) {
      resp.sendFile(__dirname + "/frontend/index.js");
    });
    app.get("/style.css",function (req,resp) {
      // resp.sendFile(__dirname + "/frontend/index.js");
    });

    var server = http.createServer(app);

    var wss = new WebSocket.Server({server: server});

    wss.on("connection", function connection (ws, req) {
      ws.on("message", onMessage);
      websocket(function (msg) {
        ws.send(msg);
      });
    });

    server.listen(port, onServe);
  };
})(PS["Server"] = PS["Server"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var $foreign = PS["Server"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Uncurried = PS["Control.Monad.Eff.Uncurried"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Prelude = PS["Prelude"];        
  var engageServer = function (port) {
      return function (onServe) {
          return function (onMessage) {
              return function (websocket) {
                  return Control_Monad_Eff_Uncurried.runEffFn4($foreign.engageServerImpl)(port)(onServe)(Control_Monad_Eff_Uncurried.mkEffFn1(onMessage))(Control_Monad_Eff_Uncurried.mkEffFn1(function ($0) {
                      return websocket(Control_Monad_Eff_Uncurried.runEffFn1($0));
                  }));
              };
          };
      };
  };
  exports["engageServer"] = engageServer;
})(PS["Server"] = PS["Server"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Data_Argonaut = PS["Data.Argonaut"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_Argonaut_Encode_Class = PS["Data.Argonaut.Encode.Class"];
  var Data_Argonaut_Encode_Combinators = PS["Data.Argonaut.Encode.Combinators"];
  var Data_Function = PS["Data.Function"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Prelude = PS["Prelude"];
  var Server = PS["Server"];        
  var ChangedSpeed = (function () {
      function ChangedSpeed(value0) {
          this.value0 = value0;
      };
      ChangedSpeed.create = function (value0) {
          return new ChangedSpeed(value0);
      };
      return ChangedSpeed;
  })();
  var TurnLeft = (function () {
      function TurnLeft() {

      };
      TurnLeft.value = new TurnLeft();
      return TurnLeft;
  })();
  var TurnRight = (function () {
      function TurnRight() {

      };
      TurnRight.value = new TurnRight();
      return TurnRight;
  })();
  var NoTurn = (function () {
      function NoTurn() {

      };
      NoTurn.value = new NoTurn();
      return NoTurn;
  })();
  var ChangedBraking = (function () {
      function ChangedBraking(value0) {
          this.value0 = value0;
      };
      ChangedBraking.create = function (value0) {
          return new ChangedBraking(value0);
      };
      return ChangedBraking;
  })();
  var ChangedLights = (function () {
      function ChangedLights(value0) {
          this.value0 = value0;
      };
      ChangedLights.create = function (value0) {
          return new ChangedLights(value0);
      };
      return ChangedLights;
  })();
  var onReceive = function (msg) {
      return Control_Monad_Eff_Console.log("received! " + msg);
  };
  var encodeJsonOutgoing = new Data_Argonaut_Encode_Class.EncodeJson(function (v) {
      if (v instanceof ChangedSpeed) {
          return Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJNumber)("speed")(v.value0))(Data_Argonaut_Core.jsonEmptyObject);
      };
      if (v instanceof TurnLeft) {
          return Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonJString)("left");
      };
      if (v instanceof TurnRight) {
          return Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonJString)("right");
      };
      if (v instanceof NoTurn) {
          return Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonJString)("no");
      };
      if (v instanceof ChangedBraking) {
          return Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJBoolean)("braking")(v.value0))(Data_Argonaut_Core.jsonEmptyObject);
      };
      if (v instanceof ChangedLights) {
          return Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJBoolean)("lights")(v.value0))(Data_Argonaut_Core.jsonEmptyObject);
      };
      throw new Error("Failed pattern match at WebSocket line 20, column 16 - line 26, column 56: " + [ v.constructor.name ]);
  });
  exports["ChangedSpeed"] = ChangedSpeed;
  exports["TurnLeft"] = TurnLeft;
  exports["TurnRight"] = TurnRight;
  exports["NoTurn"] = NoTurn;
  exports["ChangedBraking"] = ChangedBraking;
  exports["ChangedLights"] = ChangedLights;
  exports["onReceive"] = onReceive;
  exports["encodeJsonOutgoing"] = encodeJsonOutgoing;
})(PS["WebSocket"] = PS["WebSocket"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff_Now = PS["Control.Monad.Eff.Now"];
  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
  var Control_Monad_Eff_Timer = PS["Control.Monad.Eff.Timer"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Argonaut = PS["Data.Argonaut"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_Argonaut_Encode_Class = PS["Data.Argonaut.Encode.Class"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_DateTime_Instant = PS["Data.DateTime.Instant"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Time_Duration = PS["Data.Time.Duration"];
  var Data_Unit = PS["Data.Unit"];
  var GPIO = PS["GPIO"];
  var Kshatriya = PS["Kshatriya"];
  var $$Math = PS["Math"];
  var Prelude = PS["Prelude"];
  var Server = PS["Server"];
  var WebSocket = PS["WebSocket"];        
  var HitSensor = (function () {
      function HitSensor() {

      };
      HitSensor.value = new HitSensor();
      return HitSensor;
  })();
  var LeftSensor = (function () {
      function LeftSensor() {

      };
      LeftSensor.value = new LeftSensor();
      return LeftSensor;
  })();
  var pinCallback = function (dispatchWS) {
      return function (stateRef) {
          return function (pin) {
              if (Data_Eq.eq(GPIO.eqGPIOPin)(pin)(Kshatriya.toGPIOPin(Kshatriya.loSigGPIOPinAble)(Kshatriya.LoSig.value))) {
                  return function __do() {
                      var v = GPIO.read(Kshatriya.toGPIOPin(Kshatriya.loSigGPIOPinAble)(Kshatriya.LoSig.value))();
                      Control_Monad_Eff_Console.log("Low signal: " + Data_Show.show(Data_Show.showBoolean)(v))();
                      GPIO.write(Kshatriya.toGPIOPin(Kshatriya.loGPIOPinAble)(Kshatriya.Lo.value))(v)();
                      Control_Monad_Eff_Ref.modifyRef(stateRef)(function (v1) {
                          var $35 = {};
                          for (var $36 in v1) {
                              if ({}.hasOwnProperty.call(v1, $36)) {
                                  $35[$36] = v1[$36];
                              };
                          };
                          $35.lights = v;
                          return $35;
                      })();
                      return dispatchWS(new WebSocket.ChangedLights(v))();
                  };
              };
              if (Data_Eq.eq(GPIO.eqGPIOPin)(pin)(Kshatriya.toGPIOPin(Kshatriya.turnSigGPIOPinAble)(Kshatriya.TurnSigL.value))) {
                  return function __do() {
                      var v = GPIO.read(Kshatriya.toGPIOPin(Kshatriya.turnSigGPIOPinAble)(Kshatriya.TurnSigL.value))();
                      Control_Monad_Eff_Console.log("Left signal: " + Data_Show.show(Data_Show.showBoolean)(v))();
                      var v1 = Control_Monad_Eff_Ref.readRef(stateRef)();
                      if (v) {
                          if (v1.leftBlinker instanceof Data_Maybe.Nothing) {
                              var v2 = Control_Monad_Eff_Ref.newRef(false)();
                              var v3 = Control_Monad_Eff_Timer.setInterval(300)(function __do() {
                                  var v3 = Control_Monad_Eff_Ref.readRef(v2)();
                                  Control_Monad_Eff_Ref.modifyRef(v2)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean))();
                                  GPIO.write(Kshatriya.toGPIOPin(Kshatriya.turnGPIOPinAble)(Kshatriya.TurnL.value))(v3)();
                                  return GPIO.write(Kshatriya.toGPIOPin(Kshatriya.brakeGPIOPinAble)(Kshatriya.BrakeL.value))(v3)();
                              })();
                              Control_Monad_Eff_Ref.modifyRef(stateRef)(function (v4) {
                                  var $45 = {};
                                  for (var $46 in v4) {
                                      if ({}.hasOwnProperty.call(v4, $46)) {
                                          $45[$46] = v4[$46];
                                      };
                                  };
                                  $45.leftBlinker = new Data_Maybe.Just(v3);
                                  return $45;
                              })();
                              return dispatchWS(WebSocket.TurnLeft.value)();
                          };
                          return Data_Unit.unit;
                      };
                      if (v1.leftBlinker instanceof Data_Maybe.Just) {
                          Control_Monad_Eff_Timer.clearInterval(v1.leftBlinker.value0)();
                          Control_Monad_Eff_Ref.modifyRef(stateRef)(function (v2) {
                              var $49 = {};
                              for (var $50 in v2) {
                                  if ({}.hasOwnProperty.call(v2, $50)) {
                                      $49[$50] = v2[$50];
                                  };
                              };
                              $49.leftBlinker = Data_Maybe.Nothing.value;
                              return $49;
                          })();
                          GPIO.write(Kshatriya.toGPIOPin(Kshatriya.turnGPIOPinAble)(Kshatriya.TurnL.value))(false)();
                          GPIO.write(Kshatriya.toGPIOPin(Kshatriya.brakeGPIOPinAble)(Kshatriya.BrakeL.value))(v1.braking)();
                          return dispatchWS(WebSocket.NoTurn.value)();
                      };
                      return Data_Unit.unit;
                  };
              };
              if (Data_Eq.eq(GPIO.eqGPIOPin)(pin)(Kshatriya.toGPIOPin(Kshatriya.turnSigGPIOPinAble)(Kshatriya.TurnSigR.value))) {
                  return function __do() {
                      var v = GPIO.read(Kshatriya.toGPIOPin(Kshatriya.turnSigGPIOPinAble)(Kshatriya.TurnSigR.value))();
                      Control_Monad_Eff_Console.log("Right signal: " + Data_Show.show(Data_Show.showBoolean)(v))();
                      var v1 = Control_Monad_Eff_Ref.readRef(stateRef)();
                      if (v) {
                          if (v1.rightBlinker instanceof Data_Maybe.Nothing) {
                              var v2 = Control_Monad_Eff_Ref.newRef(false)();
                              var v3 = Control_Monad_Eff_Timer.setInterval(300)(function __do() {
                                  var v3 = Control_Monad_Eff_Ref.readRef(v2)();
                                  Control_Monad_Eff_Ref.modifyRef(v2)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean))();
                                  GPIO.write(Kshatriya.toGPIOPin(Kshatriya.turnGPIOPinAble)(Kshatriya.TurnR.value))(v3)();
                                  return GPIO.write(Kshatriya.toGPIOPin(Kshatriya.brakeGPIOPinAble)(Kshatriya.BrakeR.value))(v3)();
                              })();
                              Control_Monad_Eff_Ref.modifyRef(stateRef)(function (v4) {
                                  var $62 = {};
                                  for (var $63 in v4) {
                                      if ({}.hasOwnProperty.call(v4, $63)) {
                                          $62[$63] = v4[$63];
                                      };
                                  };
                                  $62.rightBlinker = new Data_Maybe.Just(v3);
                                  return $62;
                              })();
                              return dispatchWS(WebSocket.TurnRight.value)();
                          };
                          return Data_Unit.unit;
                      };
                      if (v1.rightBlinker instanceof Data_Maybe.Just) {
                          Control_Monad_Eff_Timer.clearInterval(v1.rightBlinker.value0)();
                          Control_Monad_Eff_Ref.modifyRef(stateRef)(function (v2) {
                              var $66 = {};
                              for (var $67 in v2) {
                                  if ({}.hasOwnProperty.call(v2, $67)) {
                                      $66[$67] = v2[$67];
                                  };
                              };
                              $66.rightBlinker = Data_Maybe.Nothing.value;
                              return $66;
                          })();
                          GPIO.write(Kshatriya.toGPIOPin(Kshatriya.turnGPIOPinAble)(Kshatriya.TurnR.value))(false)();
                          GPIO.write(Kshatriya.toGPIOPin(Kshatriya.brakeGPIOPinAble)(Kshatriya.BrakeR.value))(v1.braking)();
                          return dispatchWS(WebSocket.NoTurn.value)();
                      };
                      return Data_Unit.unit;
                  };
              };
              if (Data_Eq.eq(GPIO.eqGPIOPin)(pin)(Kshatriya.toGPIOPin(Kshatriya.brakeSigGPIOPinAble)(Kshatriya.BrakeSig.value))) {
                  return function __do() {
                      var v = GPIO.read(Kshatriya.toGPIOPin(Kshatriya.brakeSigGPIOPinAble)(Kshatriya.BrakeSig.value))();
                      Control_Monad_Eff_Console.log("Brake signal: " + Data_Show.show(Data_Show.showBoolean)(v))();
                      Control_Monad_Eff_Ref.modifyRef(stateRef)(function (v1) {
                          var $73 = {};
                          for (var $74 in v1) {
                              if ({}.hasOwnProperty.call(v1, $74)) {
                                  $73[$74] = v1[$74];
                              };
                          };
                          $73.braking = v;
                          return $73;
                      })();
                      dispatchWS(new WebSocket.ChangedBraking(v))();
                      var v1 = Control_Monad_Eff_Ref.readRef(stateRef)();
                      (function () {
                          if (v1.leftBlinker instanceof Data_Maybe.Nothing) {
                              return GPIO.write(Kshatriya.toGPIOPin(Kshatriya.brakeGPIOPinAble)(Kshatriya.BrakeL.value))(v);
                          };
                          return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit);
                      })()();
                      if (v1.rightBlinker instanceof Data_Maybe.Nothing) {
                          return GPIO.write(Kshatriya.toGPIOPin(Kshatriya.brakeGPIOPinAble)(Kshatriya.BrakeR.value))(v)();
                      };
                      return Data_Unit.unit;
                  };
              };
              if (Data_Eq.eq(GPIO.eqGPIOPin)(pin)(Kshatriya.toGPIOPin(Kshatriya.wheelSigGPIOPinAble)(Kshatriya.WheelSig.value))) {
                  return function __do() {
                      var v = GPIO.read(Kshatriya.toGPIOPin(Kshatriya.wheelSigGPIOPinAble)(Kshatriya.WheelSig.value))();
                      var v1 = Control_Monad_Eff_Ref.readRef(stateRef)();
                      if (v) {
                          if (v1.wheel.sensor instanceof LeftSensor) {
                              if (v1.wheel.lastHit instanceof Data_Maybe.Nothing) {
                                  var v2 = Data_Functor.map(Control_Monad_Eff.functorEff)(Data_DateTime_Instant.unInstant)(Control_Monad_Eff_Now.now)();
                                  return Control_Monad_Eff_Ref.modifyRef(stateRef)(function (v3) {
                                      var $88 = {};
                                      for (var $89 in v3) {
                                          if ({}.hasOwnProperty.call(v3, $89)) {
                                              $88[$89] = v3[$89];
                                          };
                                      };
                                      $88.wheel = {
                                          sensor: HitSensor.value, 
                                          lastHit: new Data_Maybe.Just(v2), 
                                          lastSpeed: Data_Maybe.Nothing.value
                                      };
                                      return $88;
                                  })();
                              };
                              if (v1.wheel.lastHit instanceof Data_Maybe.Just) {
                                  var v2 = Data_Functor.map(Control_Monad_Eff.functorEff)(Data_DateTime_Instant.unInstant)(Control_Monad_Eff_Now.now)();
                                  var v3 = Data_Ring.sub(Data_Time_Duration.ringMilliseconds)(v2)(v1.wheel.lastHit.value0);
                                  var circum = 2.0 * $$Math.pi * Kshatriya.wheelRadius;
                                  var spd = circum / v3;
                                  if (v1.wheel.lastSpeed instanceof Data_Maybe.Nothing) {
                                      return Control_Monad_Eff_Ref.modifyRef(stateRef)(function (v4) {
                                          var $94 = {};
                                          for (var $95 in v4) {
                                              if ({}.hasOwnProperty.call(v4, $95)) {
                                                  $94[$95] = v4[$95];
                                              };
                                          };
                                          $94.wheel = {
                                              lastHit: new Data_Maybe.Just(v2), 
                                              lastSpeed: Data_Maybe.Just.create((3.0 / 4.0) * spd), 
                                              sensor: HitSensor.value
                                          };
                                          return $94;
                                      })();
                                  };
                                  if (v1.wheel.lastSpeed instanceof Data_Maybe.Just) {
                                      var spd_ = (3.0 / 4.0) * (spd - v1.wheel.lastSpeed.value0) + v1.wheel.lastSpeed.value0;
                                      return Control_Monad_Eff_Ref.modifyRef(stateRef)(function (v4) {
                                          var $97 = {};
                                          for (var $98 in v4) {
                                              if ({}.hasOwnProperty.call(v4, $98)) {
                                                  $97[$98] = v4[$98];
                                              };
                                          };
                                          $97.wheel = {
                                              lastHit: new Data_Maybe.Just(v2), 
                                              lastSpeed: new Data_Maybe.Just(spd_), 
                                              sensor: HitSensor.value
                                          };
                                          return $97;
                                      })();
                                  };
                                  throw new Error("Failed pattern match at Main line 205, column 19 - line 217, column 51: " + [ v1.wheel.lastSpeed.constructor.name ]);
                              };
                              throw new Error("Failed pattern match at Main line 190, column 29 - line 217, column 51: " + [ v1.wheel.lastHit.constructor.name ]);
                          };
                          if (v1.wheel.sensor instanceof HitSensor) {
                              return Data_Unit.unit;
                          };
                          throw new Error("Failed pattern match at Main line 189, column 18 - line 218, column 37: " + [ v1.wheel.sensor.constructor.name ]);
                      };
                      if (v1.wheel.sensor instanceof LeftSensor) {
                          return Data_Unit.unit;
                      };
                      if (v1.wheel.sensor instanceof HitSensor) {
                          return Control_Monad_Eff_Ref.modifyRef(stateRef)(function (state) {
                              var $106 = {};
                              for (var $107 in state) {
                                  if ({}.hasOwnProperty.call(state, $107)) {
                                      $106[$107] = state[$107];
                                  };
                              };
                              $106.wheel = (function () {
                                  var $103 = {};
                                  for (var $104 in state.wheel) {
                                      if ({}.hasOwnProperty.call(state.wheel, $104)) {
                                          $103[$104] = state["wheel"][$104];
                                      };
                                  };
                                  $103.sensor = LeftSensor.value;
                                  return $103;
                              })();
                              return $106;
                          })();
                      };
                      throw new Error("Failed pattern match at Main line 219, column 18 - line 222, column 70: " + [ v1.wheel.sensor.constructor.name ]);
                  };
              };
              if (Data_Boolean.otherwise) {
                  return Control_Monad_Eff_Console.log("!?!");
              };
              throw new Error("Failed pattern match at Main line 116, column 1 - line 224, column 11: " + [ dispatchWS.constructor.name, stateRef.constructor.name, pin.constructor.name ]);
          };
      };
  };
  var initialState = {
      leftBlinker: Data_Maybe.Nothing.value, 
      rightBlinker: Data_Maybe.Nothing.value, 
      braking: false, 
      lights: false, 
      wheel: {
          lastHit: Data_Maybe.Nothing.value, 
          sensor: LeftSensor.value, 
          lastSpeed: Data_Maybe.Nothing.value
      }
  };
  var main = function __do() {
      Control_Monad_Eff_Console.log("Kshatriya starting")();
      GPIO.openWrite(Kshatriya.toGPIOPin(Kshatriya.loGPIOPinAble)(Kshatriya.Lo.value))(false)();
      GPIO.openWrite(Kshatriya.toGPIOPin(Kshatriya.turnGPIOPinAble)(Kshatriya.TurnL.value))(false)();
      GPIO.openWrite(Kshatriya.toGPIOPin(Kshatriya.turnGPIOPinAble)(Kshatriya.TurnR.value))(false)();
      GPIO.openWrite(Kshatriya.toGPIOPin(Kshatriya.brakeGPIOPinAble)(Kshatriya.BrakeL.value))(false)();
      GPIO.openWrite(Kshatriya.toGPIOPin(Kshatriya.brakeGPIOPinAble)(Kshatriya.BrakeR.value))(false)();
      Control_Monad_Eff_Console.log("Writable GPIO Pins Ready")();
      return Server.engageServer(3000)(Control_Monad_Eff_Console.log("server started"))(WebSocket.onReceive)(function (send) {
          return function __do() {
              Control_Monad_Eff_Console.log("?!?")();
              var v = Control_Monad_Eff_Ref.newRef(initialState)();
              var f = pinCallback(function ($114) {
                  return send(Data_Show.show(Data_Argonaut_Core.showJson)(Data_Argonaut_Encode_Class.encodeJson(WebSocket.encodeJsonOutgoing)($114)));
              })(v);
              var listen$prime = function (dictGPIOPinAble) {
                  return function (x) {
                      return function __do() {
                          GPIO.listen(Kshatriya.toGPIOPin(dictGPIOPinAble)(x))(f)();
                          return f(Kshatriya.toGPIOPin(dictGPIOPinAble)(x))();
                      };
                  };
              };
              listen$prime(Kshatriya.loSigGPIOPinAble)(Kshatriya.LoSig.value)();
              listen$prime(Kshatriya.turnSigGPIOPinAble)(Kshatriya.TurnSigL.value)();
              listen$prime(Kshatriya.turnSigGPIOPinAble)(Kshatriya.TurnSigR.value)();
              listen$prime(Kshatriya.brakeSigGPIOPinAble)(Kshatriya.BrakeSig.value)();
              listen$prime(Kshatriya.wheelSigGPIOPinAble)(Kshatriya.WheelSig.value)();
              Control_Monad_Eff_Console.log("Readable GPIO Pins Ready")();
              return Control_Monad_Eff_Console.log("Kshatriya Ready")();
          };
      })();
  };
  exports["HitSensor"] = HitSensor;
  exports["LeftSensor"] = LeftSensor;
  exports["initialState"] = initialState;
  exports["main"] = main;
  exports["pinCallback"] = pinCallback;
})(PS["Main"] = PS["Main"] || {});
PS["Main"].main();
