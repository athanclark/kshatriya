// Generated by psc-bundle 0.10.7
var PS = {};
(function(exports) {
    "use strict";

  exports.log = function (s) {
    return function () {
      console.log(s);
      return {};
    };
  };
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  exports["log"] = $foreign.log;
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
    "use strict";

  exports.runEffFn2 = function runEffFn2(fn) {
    return function(a) {
      return function(b) {
        return function() {
          return fn(a, b);
        };
      };
    };
  };
})(PS["Control.Monad.Eff.Uncurried"] = PS["Control.Monad.Eff.Uncurried"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Uncurried"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  exports["runEffFn2"] = $foreign.runEffFn2;
})(PS["Control.Monad.Eff.Uncurried"] = PS["Control.Monad.Eff.Uncurried"] || {});
(function(exports) {
    "use strict";
  var rpio =require("rpio");

  exports.openWriteImpl = function openWriteImpl (pin, def) {
    rpio.open(pin, rpio.OUTPUT, def ? rpio.HIGH : rpio.LOW);
  };

  exports.writePinImpl = function writePinImpl (pin, val) {
    rpio.write(pin, val ? rpio.HIGH : rpio.LOW);
  };
})(PS["GPIO"] = PS["GPIO"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var $foreign = PS["GPIO"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Uncurried = PS["Control.Monad.Eff.Uncurried"];
  var Prelude = PS["Prelude"];        
  var GPIO4 = (function () {
      function GPIO4() {

      };
      GPIO4.value = new GPIO4();
      return GPIO4;
  })();
  var GPIO5 = (function () {
      function GPIO5() {

      };
      GPIO5.value = new GPIO5();
      return GPIO5;
  })();
  var GPIO6 = (function () {
      function GPIO6() {

      };
      GPIO6.value = new GPIO6();
      return GPIO6;
  })();
  var GPIO12 = (function () {
      function GPIO12() {

      };
      GPIO12.value = new GPIO12();
      return GPIO12;
  })();
  var GPIO13 = (function () {
      function GPIO13() {

      };
      GPIO13.value = new GPIO13();
      return GPIO13;
  })();
  var GPIO16 = (function () {
      function GPIO16() {

      };
      GPIO16.value = new GPIO16();
      return GPIO16;
  })();
  var GPIO17 = (function () {
      function GPIO17() {

      };
      GPIO17.value = new GPIO17();
      return GPIO17;
  })();
  var GPIO18 = (function () {
      function GPIO18() {

      };
      GPIO18.value = new GPIO18();
      return GPIO18;
  })();
  var GPIO19 = (function () {
      function GPIO19() {

      };
      GPIO19.value = new GPIO19();
      return GPIO19;
  })();
  var GPIO20 = (function () {
      function GPIO20() {

      };
      GPIO20.value = new GPIO20();
      return GPIO20;
  })();
  var GPIO21 = (function () {
      function GPIO21() {

      };
      GPIO21.value = new GPIO21();
      return GPIO21;
  })();
  var GPIO22 = (function () {
      function GPIO22() {

      };
      GPIO22.value = new GPIO22();
      return GPIO22;
  })();
  var GPIO23 = (function () {
      function GPIO23() {

      };
      GPIO23.value = new GPIO23();
      return GPIO23;
  })();
  var GPIO24 = (function () {
      function GPIO24() {

      };
      GPIO24.value = new GPIO24();
      return GPIO24;
  })();
  var GPIO25 = (function () {
      function GPIO25() {

      };
      GPIO25.value = new GPIO25();
      return GPIO25;
  })();
  var GPIO26 = (function () {
      function GPIO26() {

      };
      GPIO26.value = new GPIO26();
      return GPIO26;
  })();
  var GPIO27 = (function () {
      function GPIO27() {

      };
      GPIO27.value = new GPIO27();
      return GPIO27;
  })();
  var toPin = function (v) {
      if (v instanceof GPIO4) {
          return 7;
      };
      if (v instanceof GPIO5) {
          return 29;
      };
      if (v instanceof GPIO6) {
          return 31;
      };
      if (v instanceof GPIO12) {
          return 32;
      };
      if (v instanceof GPIO13) {
          return 33;
      };
      if (v instanceof GPIO16) {
          return 36;
      };
      if (v instanceof GPIO17) {
          return 11;
      };
      if (v instanceof GPIO18) {
          return 12;
      };
      if (v instanceof GPIO19) {
          return 35;
      };
      if (v instanceof GPIO20) {
          return 38;
      };
      if (v instanceof GPIO21) {
          return 40;
      };
      if (v instanceof GPIO22) {
          return 15;
      };
      if (v instanceof GPIO23) {
          return 16;
      };
      if (v instanceof GPIO24) {
          return 18;
      };
      if (v instanceof GPIO25) {
          return 22;
      };
      if (v instanceof GPIO26) {
          return 37;
      };
      if (v instanceof GPIO27) {
          return 13;
      };
      throw new Error("Failed pattern match at GPIO line 43, column 9 - line 63, column 1: " + [ v.constructor.name ]);
  };
  var write = function (pin) {
      return function (val) {
          return Control_Monad_Eff_Uncurried.runEffFn2($foreign.writePinImpl)(toPin(pin))(val);
      };
  };
  var openWrite = function (pin) {
      return function (val) {
          return Control_Monad_Eff_Uncurried.runEffFn2($foreign.openWriteImpl)(toPin(pin))(val);
      };
  };
  exports["GPIO4"] = GPIO4;
  exports["GPIO5"] = GPIO5;
  exports["GPIO6"] = GPIO6;
  exports["GPIO12"] = GPIO12;
  exports["GPIO13"] = GPIO13;
  exports["GPIO16"] = GPIO16;
  exports["GPIO17"] = GPIO17;
  exports["GPIO18"] = GPIO18;
  exports["GPIO19"] = GPIO19;
  exports["GPIO20"] = GPIO20;
  exports["GPIO21"] = GPIO21;
  exports["GPIO22"] = GPIO22;
  exports["GPIO23"] = GPIO23;
  exports["GPIO24"] = GPIO24;
  exports["GPIO25"] = GPIO25;
  exports["GPIO26"] = GPIO26;
  exports["GPIO27"] = GPIO27;
  exports["openWrite"] = openWrite;
  exports["write"] = write;
})(PS["GPIO"] = PS["GPIO"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var GPIO = PS["GPIO"];
  var Prelude = PS["Prelude"];        
  var main = function __do() {
      Control_Monad_Eff_Console.log("Hello sailor!")();
      GPIO.openWrite(GPIO.GPIO4.value)(false)();
      return GPIO.write(GPIO.GPIO4.value)(true)();
  };
  exports["main"] = main;
})(PS["Main"] = PS["Main"] || {});
PS["Main"].main();
