// Generated by purs version 0.11.5
"use strict";
var $foreign = require("./foreign");
var Control_Monad_Eff = require("../Control.Monad.Eff");
var Control_Monad_Eff_Uncurried = require("../Control.Monad.Eff.Uncurried");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Data_Boolean = require("../Data.Boolean");
var Data_Eq = require("../Data.Eq");
var Data_Generic = require("../Data.Generic");
var Data_Maybe = require("../Data.Maybe");
var Prelude = require("../Prelude");
var GPIO4 = (function () {
    function GPIO4() {

    };
    GPIO4.value = new GPIO4();
    return GPIO4;
})();
var GPIO5 = (function () {
    function GPIO5() {

    };
    GPIO5.value = new GPIO5();
    return GPIO5;
})();
var GPIO6 = (function () {
    function GPIO6() {

    };
    GPIO6.value = new GPIO6();
    return GPIO6;
})();
var GPIO12 = (function () {
    function GPIO12() {

    };
    GPIO12.value = new GPIO12();
    return GPIO12;
})();
var GPIO13 = (function () {
    function GPIO13() {

    };
    GPIO13.value = new GPIO13();
    return GPIO13;
})();
var GPIO16 = (function () {
    function GPIO16() {

    };
    GPIO16.value = new GPIO16();
    return GPIO16;
})();
var GPIO17 = (function () {
    function GPIO17() {

    };
    GPIO17.value = new GPIO17();
    return GPIO17;
})();
var GPIO18 = (function () {
    function GPIO18() {

    };
    GPIO18.value = new GPIO18();
    return GPIO18;
})();
var GPIO19 = (function () {
    function GPIO19() {

    };
    GPIO19.value = new GPIO19();
    return GPIO19;
})();
var GPIO20 = (function () {
    function GPIO20() {

    };
    GPIO20.value = new GPIO20();
    return GPIO20;
})();
var GPIO21 = (function () {
    function GPIO21() {

    };
    GPIO21.value = new GPIO21();
    return GPIO21;
})();
var GPIO22 = (function () {
    function GPIO22() {

    };
    GPIO22.value = new GPIO22();
    return GPIO22;
})();
var GPIO23 = (function () {
    function GPIO23() {

    };
    GPIO23.value = new GPIO23();
    return GPIO23;
})();
var GPIO24 = (function () {
    function GPIO24() {

    };
    GPIO24.value = new GPIO24();
    return GPIO24;
})();
var GPIO25 = (function () {
    function GPIO25() {

    };
    GPIO25.value = new GPIO25();
    return GPIO25;
})();
var GPIO26 = (function () {
    function GPIO26() {

    };
    GPIO26.value = new GPIO26();
    return GPIO26;
})();
var GPIO27 = (function () {
    function GPIO27() {

    };
    GPIO27.value = new GPIO27();
    return GPIO27;
})();
var toPin = function (v) {
    if (v instanceof GPIO4) {
        return 7;
    };
    if (v instanceof GPIO5) {
        return 29;
    };
    if (v instanceof GPIO6) {
        return 31;
    };
    if (v instanceof GPIO12) {
        return 32;
    };
    if (v instanceof GPIO13) {
        return 33;
    };
    if (v instanceof GPIO16) {
        return 36;
    };
    if (v instanceof GPIO17) {
        return 11;
    };
    if (v instanceof GPIO18) {
        return 12;
    };
    if (v instanceof GPIO19) {
        return 35;
    };
    if (v instanceof GPIO20) {
        return 38;
    };
    if (v instanceof GPIO21) {
        return 40;
    };
    if (v instanceof GPIO22) {
        return 15;
    };
    if (v instanceof GPIO23) {
        return 16;
    };
    if (v instanceof GPIO24) {
        return 18;
    };
    if (v instanceof GPIO25) {
        return 22;
    };
    if (v instanceof GPIO26) {
        return 37;
    };
    if (v instanceof GPIO27) {
        return 13;
    };
    throw new Error("Failed pattern match at GPIO line 50, column 9 - line 69, column 1: " + [ v.constructor.name ]);
};
var write = function (pin) {
    return function (val) {
        return Control_Monad_Eff_Uncurried.runEffFn2($foreign.writePinImpl)(toPin(pin))(val);
    };
};
var sleep = Control_Monad_Eff_Uncurried.runEffFn1($foreign.sleepImpl);
var read = function (pin) {
    return Control_Monad_Eff_Uncurried.runEffFn1($foreign.readPinImpl)(toPin(pin));
};
var openWrite = function (pin) {
    return function (val) {
        return Control_Monad_Eff_Uncurried.runEffFn2($foreign.openWriteImpl)(toPin(pin))(val);
    };
};
var openRead = function (pin) {
    return Control_Monad_Eff_Uncurried.runEffFn1($foreign.openReadImpl)(toPin(pin));
};
var genericGPIOPin = new Data_Generic.Generic(function (v) {
    if (v instanceof Data_Generic.SProd && (v.value0 === "GPIO.GPIO4" && v.value1.length === 0)) {
        return new Data_Maybe.Just(GPIO4.value);
    };
    if (v instanceof Data_Generic.SProd && (v.value0 === "GPIO.GPIO5" && v.value1.length === 0)) {
        return new Data_Maybe.Just(GPIO5.value);
    };
    if (v instanceof Data_Generic.SProd && (v.value0 === "GPIO.GPIO6" && v.value1.length === 0)) {
        return new Data_Maybe.Just(GPIO6.value);
    };
    if (v instanceof Data_Generic.SProd && (v.value0 === "GPIO.GPIO12" && v.value1.length === 0)) {
        return new Data_Maybe.Just(GPIO12.value);
    };
    if (v instanceof Data_Generic.SProd && (v.value0 === "GPIO.GPIO13" && v.value1.length === 0)) {
        return new Data_Maybe.Just(GPIO13.value);
    };
    if (v instanceof Data_Generic.SProd && (v.value0 === "GPIO.GPIO16" && v.value1.length === 0)) {
        return new Data_Maybe.Just(GPIO16.value);
    };
    if (v instanceof Data_Generic.SProd && (v.value0 === "GPIO.GPIO17" && v.value1.length === 0)) {
        return new Data_Maybe.Just(GPIO17.value);
    };
    if (v instanceof Data_Generic.SProd && (v.value0 === "GPIO.GPIO18" && v.value1.length === 0)) {
        return new Data_Maybe.Just(GPIO18.value);
    };
    if (v instanceof Data_Generic.SProd && (v.value0 === "GPIO.GPIO19" && v.value1.length === 0)) {
        return new Data_Maybe.Just(GPIO19.value);
    };
    if (v instanceof Data_Generic.SProd && (v.value0 === "GPIO.GPIO20" && v.value1.length === 0)) {
        return new Data_Maybe.Just(GPIO20.value);
    };
    if (v instanceof Data_Generic.SProd && (v.value0 === "GPIO.GPIO21" && v.value1.length === 0)) {
        return new Data_Maybe.Just(GPIO21.value);
    };
    if (v instanceof Data_Generic.SProd && (v.value0 === "GPIO.GPIO22" && v.value1.length === 0)) {
        return new Data_Maybe.Just(GPIO22.value);
    };
    if (v instanceof Data_Generic.SProd && (v.value0 === "GPIO.GPIO23" && v.value1.length === 0)) {
        return new Data_Maybe.Just(GPIO23.value);
    };
    if (v instanceof Data_Generic.SProd && (v.value0 === "GPIO.GPIO24" && v.value1.length === 0)) {
        return new Data_Maybe.Just(GPIO24.value);
    };
    if (v instanceof Data_Generic.SProd && (v.value0 === "GPIO.GPIO25" && v.value1.length === 0)) {
        return new Data_Maybe.Just(GPIO25.value);
    };
    if (v instanceof Data_Generic.SProd && (v.value0 === "GPIO.GPIO26" && v.value1.length === 0)) {
        return new Data_Maybe.Just(GPIO26.value);
    };
    if (v instanceof Data_Generic.SProd && (v.value0 === "GPIO.GPIO27" && v.value1.length === 0)) {
        return new Data_Maybe.Just(GPIO27.value);
    };
    return Data_Maybe.Nothing.value;
}, function ($dollarq) {
    return new Data_Generic.SigProd("GPIO.GPIOPin", [ {
        sigConstructor: "GPIO.GPIO4", 
        sigValues: [  ]
    }, {
        sigConstructor: "GPIO.GPIO5", 
        sigValues: [  ]
    }, {
        sigConstructor: "GPIO.GPIO6", 
        sigValues: [  ]
    }, {
        sigConstructor: "GPIO.GPIO12", 
        sigValues: [  ]
    }, {
        sigConstructor: "GPIO.GPIO13", 
        sigValues: [  ]
    }, {
        sigConstructor: "GPIO.GPIO16", 
        sigValues: [  ]
    }, {
        sigConstructor: "GPIO.GPIO17", 
        sigValues: [  ]
    }, {
        sigConstructor: "GPIO.GPIO18", 
        sigValues: [  ]
    }, {
        sigConstructor: "GPIO.GPIO19", 
        sigValues: [  ]
    }, {
        sigConstructor: "GPIO.GPIO20", 
        sigValues: [  ]
    }, {
        sigConstructor: "GPIO.GPIO21", 
        sigValues: [  ]
    }, {
        sigConstructor: "GPIO.GPIO22", 
        sigValues: [  ]
    }, {
        sigConstructor: "GPIO.GPIO23", 
        sigValues: [  ]
    }, {
        sigConstructor: "GPIO.GPIO24", 
        sigValues: [  ]
    }, {
        sigConstructor: "GPIO.GPIO25", 
        sigValues: [  ]
    }, {
        sigConstructor: "GPIO.GPIO26", 
        sigValues: [  ]
    }, {
        sigConstructor: "GPIO.GPIO27", 
        sigValues: [  ]
    } ]);
}, function (v) {
    if (v instanceof GPIO4) {
        return new Data_Generic.SProd("GPIO.GPIO4", [  ]);
    };
    if (v instanceof GPIO5) {
        return new Data_Generic.SProd("GPIO.GPIO5", [  ]);
    };
    if (v instanceof GPIO6) {
        return new Data_Generic.SProd("GPIO.GPIO6", [  ]);
    };
    if (v instanceof GPIO12) {
        return new Data_Generic.SProd("GPIO.GPIO12", [  ]);
    };
    if (v instanceof GPIO13) {
        return new Data_Generic.SProd("GPIO.GPIO13", [  ]);
    };
    if (v instanceof GPIO16) {
        return new Data_Generic.SProd("GPIO.GPIO16", [  ]);
    };
    if (v instanceof GPIO17) {
        return new Data_Generic.SProd("GPIO.GPIO17", [  ]);
    };
    if (v instanceof GPIO18) {
        return new Data_Generic.SProd("GPIO.GPIO18", [  ]);
    };
    if (v instanceof GPIO19) {
        return new Data_Generic.SProd("GPIO.GPIO19", [  ]);
    };
    if (v instanceof GPIO20) {
        return new Data_Generic.SProd("GPIO.GPIO20", [  ]);
    };
    if (v instanceof GPIO21) {
        return new Data_Generic.SProd("GPIO.GPIO21", [  ]);
    };
    if (v instanceof GPIO22) {
        return new Data_Generic.SProd("GPIO.GPIO22", [  ]);
    };
    if (v instanceof GPIO23) {
        return new Data_Generic.SProd("GPIO.GPIO23", [  ]);
    };
    if (v instanceof GPIO24) {
        return new Data_Generic.SProd("GPIO.GPIO24", [  ]);
    };
    if (v instanceof GPIO25) {
        return new Data_Generic.SProd("GPIO.GPIO25", [  ]);
    };
    if (v instanceof GPIO26) {
        return new Data_Generic.SProd("GPIO.GPIO26", [  ]);
    };
    if (v instanceof GPIO27) {
        return new Data_Generic.SProd("GPIO.GPIO27", [  ]);
    };
    throw new Error("Failed pattern match at GPIO line 40, column 1 - line 40, column 50: " + [ v.constructor.name ]);
});
var fromPin = function (pin) {
    if (pin === 7) {
        return GPIO4.value;
    };
    if (pin === 29) {
        return GPIO5.value;
    };
    if (pin === 31) {
        return GPIO6.value;
    };
    if (pin === 32) {
        return GPIO12.value;
    };
    if (pin === 33) {
        return GPIO13.value;
    };
    if (pin === 36) {
        return GPIO16.value;
    };
    if (pin === 11) {
        return GPIO17.value;
    };
    if (pin === 12) {
        return GPIO18.value;
    };
    if (pin === 35) {
        return GPIO19.value;
    };
    if (pin === 38) {
        return GPIO20.value;
    };
    if (pin === 40) {
        return GPIO21.value;
    };
    if (pin === 15) {
        return GPIO22.value;
    };
    if (pin === 16) {
        return GPIO23.value;
    };
    if (pin === 18) {
        return GPIO24.value;
    };
    if (pin === 22) {
        return GPIO25.value;
    };
    if (pin === 37) {
        return GPIO26.value;
    };
    if (pin === 13) {
        return GPIO27.value;
    };
    if (Data_Boolean.otherwise) {
        return GPIO27.value;
    };
    throw new Error("Failed pattern match at GPIO line 70, column 1 - line 88, column 23: " + [ pin.constructor.name ]);
};
var listen = function (pin) {
    return function (f) {
        return Control_Monad_Eff_Uncurried.runEffFn2($foreign.listenImpl)(toPin(pin))(Control_Monad_Eff_Uncurried.mkEffFn1(function ($41) {
            return f(fromPin($41));
        }));
    };
};
var eqGPIOPin = new Data_Eq.Eq(Data_Generic.gEq(genericGPIOPin));
module.exports = {
    GPIO4: GPIO4, 
    GPIO5: GPIO5, 
    GPIO6: GPIO6, 
    GPIO12: GPIO12, 
    GPIO13: GPIO13, 
    GPIO16: GPIO16, 
    GPIO17: GPIO17, 
    GPIO18: GPIO18, 
    GPIO19: GPIO19, 
    GPIO20: GPIO20, 
    GPIO21: GPIO21, 
    GPIO22: GPIO22, 
    GPIO23: GPIO23, 
    GPIO24: GPIO24, 
    GPIO25: GPIO25, 
    GPIO26: GPIO26, 
    GPIO27: GPIO27, 
    listen: listen, 
    openRead: openRead, 
    openWrite: openWrite, 
    read: read, 
    sleep: sleep, 
    write: write, 
    genericGPIOPin: genericGPIOPin, 
    eqGPIOPin: eqGPIOPin
};
