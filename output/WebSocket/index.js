// Generated by purs version 0.11.6
"use strict";
var Control_Monad_Eff = require("../Control.Monad.Eff");
var Control_Monad_Eff_Console = require("../Control.Monad.Eff.Console");
var Data_Argonaut = require("../Data.Argonaut");
var Data_Argonaut_Core = require("../Data.Argonaut.Core");
var Data_Argonaut_Encode_Class = require("../Data.Argonaut.Encode.Class");
var Data_Argonaut_Encode_Combinators = require("../Data.Argonaut.Encode.Combinators");
var Data_Function = require("../Data.Function");
var Data_Semigroup = require("../Data.Semigroup");
var Prelude = require("../Prelude");
var Server = require("../Server");
var ChangedSpeed = (function () {
    function ChangedSpeed(value0) {
        this.value0 = value0;
    };
    ChangedSpeed.create = function (value0) {
        return new ChangedSpeed(value0);
    };
    return ChangedSpeed;
})();
var TurnLeft = (function () {
    function TurnLeft() {

    };
    TurnLeft.value = new TurnLeft();
    return TurnLeft;
})();
var TurnRight = (function () {
    function TurnRight() {

    };
    TurnRight.value = new TurnRight();
    return TurnRight;
})();
var NoTurn = (function () {
    function NoTurn() {

    };
    NoTurn.value = new NoTurn();
    return NoTurn;
})();
var ChangedBraking = (function () {
    function ChangedBraking(value0) {
        this.value0 = value0;
    };
    ChangedBraking.create = function (value0) {
        return new ChangedBraking(value0);
    };
    return ChangedBraking;
})();
var ChangedLights = (function () {
    function ChangedLights(value0) {
        this.value0 = value0;
    };
    ChangedLights.create = function (value0) {
        return new ChangedLights(value0);
    };
    return ChangedLights;
})();
var ChangedHorn = (function () {
    function ChangedHorn(value0) {
        this.value0 = value0;
    };
    ChangedHorn.create = function (value0) {
        return new ChangedHorn(value0);
    };
    return ChangedHorn;
})();
var onReceive = function (msg) {
    return Control_Monad_Eff_Console.log("received! " + msg);
};
var encodeJsonOutgoing = new Data_Argonaut_Encode_Class.EncodeJson(function (v) {
    if (v instanceof ChangedSpeed) {
        return Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJNumber)("speed")(v.value0))(Data_Argonaut_Core.jsonEmptyObject);
    };
    if (v instanceof TurnLeft) {
        return Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonJString)("left");
    };
    if (v instanceof TurnRight) {
        return Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonJString)("right");
    };
    if (v instanceof NoTurn) {
        return Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonJString)("no");
    };
    if (v instanceof ChangedBraking) {
        return Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJBoolean)("braking")(v.value0))(Data_Argonaut_Core.jsonEmptyObject);
    };
    if (v instanceof ChangedLights) {
        return Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJBoolean)("lights")(v.value0))(Data_Argonaut_Core.jsonEmptyObject);
    };
    if (v instanceof ChangedHorn) {
        return Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJBoolean)("horn")(v.value0))(Data_Argonaut_Core.jsonEmptyObject);
    };
    throw new Error("Failed pattern match at WebSocket line 21, column 16 - line 28, column 52: " + [ v.constructor.name ]);
});
module.exports = {
    ChangedSpeed: ChangedSpeed, 
    TurnLeft: TurnLeft, 
    TurnRight: TurnRight, 
    NoTurn: NoTurn, 
    ChangedBraking: ChangedBraking, 
    ChangedLights: ChangedLights, 
    ChangedHorn: ChangedHorn, 
    onReceive: onReceive, 
    encodeJsonOutgoing: encodeJsonOutgoing
};
