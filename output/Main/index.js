// Generated by purs version 0.11.5
"use strict";
var Control_Applicative = require("../Control.Applicative");
var Control_Bind = require("../Control.Bind");
var Control_Monad_Eff = require("../Control.Monad.Eff");
var Control_Monad_Eff_Console = require("../Control.Monad.Eff.Console");
var Control_Monad_Eff_Ref = require("../Control.Monad.Eff.Ref");
var Control_Monad_Eff_Timer = require("../Control.Monad.Eff.Timer");
var Data_Boolean = require("../Data.Boolean");
var Data_Eq = require("../Data.Eq");
var Data_Function = require("../Data.Function");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra");
var Data_Maybe = require("../Data.Maybe");
var Data_Unit = require("../Data.Unit");
var GPIO = require("../GPIO");
var Kshatriya = require("../Kshatriya");
var Prelude = require("../Prelude");
var pinCallback = function (stateRef) {
    return function (pin) {
        if (Data_Eq.eq(GPIO.eqGPIOPin)(pin)(Kshatriya.toGPIOPin(Kshatriya.loSigGPIOPinAble)(Kshatriya.LoSig.value))) {
            return function __do() {
                var v = GPIO.read(Kshatriya.toGPIOPin(Kshatriya.loSigGPIOPinAble)(Kshatriya.LoSig.value))();
                if (v) {
                    return GPIO.write(Kshatriya.toGPIOPin(Kshatriya.loGPIOPinAble)(Kshatriya.Lo.value))(true)();
                };
                return GPIO.write(Kshatriya.toGPIOPin(Kshatriya.loGPIOPinAble)(Kshatriya.Lo.value))(false)();
            };
        };
        if (Data_Eq.eq(GPIO.eqGPIOPin)(pin)(Kshatriya.toGPIOPin(Kshatriya.turnSigGPIOPinAble)(Kshatriya.TurnSigL.value))) {
            return function __do() {
                var v = GPIO.read(Kshatriya.toGPIOPin(Kshatriya.turnSigGPIOPinAble)(Kshatriya.TurnSigL.value))();
                var v1 = Control_Monad_Eff_Ref.readRef(stateRef)();
                if (v) {
                    if (v1.leftBlinker instanceof Data_Maybe.Nothing) {
                        var v2 = Control_Monad_Eff_Ref.newRef(false)();
                        var v3 = Control_Monad_Eff_Timer.setInterval(100)(function __do() {
                            var v3 = Control_Monad_Eff_Ref.readRef(v2)();
                            Control_Monad_Eff_Ref.modifyRef(v2)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean))();
                            GPIO.write(Kshatriya.toGPIOPin(Kshatriya.turnGPIOPinAble)(Kshatriya.TurnL.value))(v3)();
                            return GPIO.write(Kshatriya.toGPIOPin(Kshatriya.brakeGPIOPinAble)(Kshatriya.BrakeL.value))(v3)();
                        })();
                        return Control_Monad_Eff_Ref.modifyRef(stateRef)(function (v4) {
                            var $28 = {};
                            for (var $29 in v4) {
                                if ({}.hasOwnProperty.call(v4, $29)) {
                                    $28[$29] = v4[$29];
                                };
                            };
                            $28.leftBlinker = new Data_Maybe.Just(v3);
                            return $28;
                        })();
                    };
                    return Data_Unit.unit;
                };
                if (v1.leftBlinker instanceof Data_Maybe.Just) {
                    Control_Monad_Eff_Timer.clearInterval(v1.leftBlinker.value0)();
                    GPIO.write(Kshatriya.toGPIOPin(Kshatriya.turnGPIOPinAble)(Kshatriya.TurnL.value))(false)();
                    return GPIO.write(Kshatriya.toGPIOPin(Kshatriya.brakeGPIOPinAble)(Kshatriya.BrakeL.value))(v1.braking)();
                };
                return Data_Unit.unit;
            };
        };
        if (Data_Eq.eq(GPIO.eqGPIOPin)(pin)(Kshatriya.toGPIOPin(Kshatriya.turnSigGPIOPinAble)(Kshatriya.TurnSigR.value))) {
            return function __do() {
                var v = GPIO.read(Kshatriya.toGPIOPin(Kshatriya.turnSigGPIOPinAble)(Kshatriya.TurnSigR.value))();
                var v1 = Control_Monad_Eff_Ref.readRef(stateRef)();
                if (v) {
                    if (v1.rightBlinker instanceof Data_Maybe.Nothing) {
                        var v2 = Control_Monad_Eff_Ref.newRef(false)();
                        var v3 = Control_Monad_Eff_Timer.setInterval(100)(function __do() {
                            var v3 = Control_Monad_Eff_Ref.readRef(v2)();
                            Control_Monad_Eff_Ref.modifyRef(v2)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean))();
                            GPIO.write(Kshatriya.toGPIOPin(Kshatriya.turnGPIOPinAble)(Kshatriya.TurnR.value))(v3)();
                            return GPIO.write(Kshatriya.toGPIOPin(Kshatriya.brakeGPIOPinAble)(Kshatriya.BrakeR.value))(v3)();
                        })();
                        return Control_Monad_Eff_Ref.modifyRef(stateRef)(function (v4) {
                            var $42 = {};
                            for (var $43 in v4) {
                                if ({}.hasOwnProperty.call(v4, $43)) {
                                    $42[$43] = v4[$43];
                                };
                            };
                            $42.rightBlinker = new Data_Maybe.Just(v3);
                            return $42;
                        })();
                    };
                    return Data_Unit.unit;
                };
                if (v1.rightBlinker instanceof Data_Maybe.Just) {
                    Control_Monad_Eff_Timer.clearInterval(v1.rightBlinker.value0)();
                    GPIO.write(Kshatriya.toGPIOPin(Kshatriya.turnGPIOPinAble)(Kshatriya.TurnR.value))(false)();
                    return GPIO.write(Kshatriya.toGPIOPin(Kshatriya.brakeGPIOPinAble)(Kshatriya.BrakeR.value))(v1.braking)();
                };
                return Data_Unit.unit;
            };
        };
        if (Data_Eq.eq(GPIO.eqGPIOPin)(pin)(Kshatriya.toGPIOPin(Kshatriya.brakeSigGPIOPinAble)(Kshatriya.BrakeSig.value))) {
            return function __do() {
                var v = GPIO.read(Kshatriya.toGPIOPin(Kshatriya.brakeSigGPIOPinAble)(Kshatriya.BrakeSig.value))();
                Control_Monad_Eff_Ref.modifyRef(stateRef)(function (v1) {
                    var $50 = {};
                    for (var $51 in v1) {
                        if ({}.hasOwnProperty.call(v1, $51)) {
                            $50[$51] = v1[$51];
                        };
                    };
                    $50.braking = v;
                    return $50;
                })();
                var v1 = Control_Monad_Eff_Ref.readRef(stateRef)();
                (function () {
                    if (v1.leftBlinker instanceof Data_Maybe.Nothing) {
                        return GPIO.write(Kshatriya.toGPIOPin(Kshatriya.brakeGPIOPinAble)(Kshatriya.BrakeL.value))(v);
                    };
                    return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit);
                })()();
                if (v1.rightBlinker instanceof Data_Maybe.Nothing) {
                    return GPIO.write(Kshatriya.toGPIOPin(Kshatriya.brakeGPIOPinAble)(Kshatriya.BrakeR.value))(v)();
                };
                return Data_Unit.unit;
            };
        };
        if (Data_Boolean.otherwise) {
            return Control_Monad_Eff_Console.log("!?!");
        };
        throw new Error("Failed pattern match at Main line 64, column 1 - line 121, column 11: " + [ stateRef.constructor.name, pin.constructor.name ]);
    };
};
var initialState = {
    leftBlinker: Data_Maybe.Nothing.value, 
    rightBlinker: Data_Maybe.Nothing.value, 
    braking: false
};
var main = function __do() {
    Control_Monad_Eff_Console.log("Hello sailor!")();
    GPIO.openWrite(Kshatriya.toGPIOPin(Kshatriya.loGPIOPinAble)(Kshatriya.Lo.value))(false)();
    GPIO.openWrite(Kshatriya.toGPIOPin(Kshatriya.turnGPIOPinAble)(Kshatriya.TurnL.value))(false)();
    GPIO.openWrite(Kshatriya.toGPIOPin(Kshatriya.turnGPIOPinAble)(Kshatriya.TurnR.value))(false)();
    GPIO.openWrite(Kshatriya.toGPIOPin(Kshatriya.brakeGPIOPinAble)(Kshatriya.BrakeL.value))(false)();
    GPIO.openWrite(Kshatriya.toGPIOPin(Kshatriya.brakeGPIOPinAble)(Kshatriya.BrakeR.value))(false)();
    var v = Control_Monad_Eff_Ref.newRef(initialState)();
    var f = pinCallback(v);
    GPIO.listen(Kshatriya.toGPIOPin(Kshatriya.loSigGPIOPinAble)(Kshatriya.LoSig.value))(f)();
    GPIO.listen(Kshatriya.toGPIOPin(Kshatriya.turnSigGPIOPinAble)(Kshatriya.TurnSigL.value))(f)();
    GPIO.listen(Kshatriya.toGPIOPin(Kshatriya.turnSigGPIOPinAble)(Kshatriya.TurnSigR.value))(f)();
    GPIO.listen(Kshatriya.toGPIOPin(Kshatriya.brakeSigGPIOPinAble)(Kshatriya.BrakeSig.value))(f)();
    return GPIO.sleep(10000)();
};
module.exports = {
    initialState: initialState, 
    main: main, 
    pinCallback: pinCallback
};
