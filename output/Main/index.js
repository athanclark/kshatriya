// Generated by purs version 0.11.5
"use strict";
var Control_Bind = require("../Control.Bind");
var Control_Monad_Eff = require("../Control.Monad.Eff");
var Control_Monad_Eff_Console = require("../Control.Monad.Eff.Console");
var Data_Boolean = require("../Data.Boolean");
var Data_Eq = require("../Data.Eq");
var GPIO = require("../GPIO");
var Kshatriya = require("../Kshatriya");
var Prelude = require("../Prelude");
var pinCallback = function (pin) {
    if (Data_Eq.eq(GPIO.eqGPIOPin)(pin)(Kshatriya.toGPIOPin(Kshatriya.loSigGPIOPinAble)(Kshatriya.LoSig.value))) {
        return function __do() {
            Control_Monad_Eff_Console.log("??")();
            var v = GPIO.read(Kshatriya.toGPIOPin(Kshatriya.loSigGPIOPinAble)(Kshatriya.LoSig.value))();
            if (v) {
                return GPIO.write(Kshatriya.toGPIOPin(Kshatriya.loGPIOPinAble)(Kshatriya.Lo.value))(true)();
            };
            return GPIO.write(Kshatriya.toGPIOPin(Kshatriya.loGPIOPinAble)(Kshatriya.Lo.value))(false)();
        };
    };
    if (Data_Boolean.otherwise) {
        return Control_Monad_Eff_Console.log("!?!");
    };
    throw new Error("Failed pattern match at Main line 26, column 1 - line 34, column 11: " + [ pin.constructor.name ]);
};
var main = function __do() {
    Control_Monad_Eff_Console.log("Hello sailor!")();
    GPIO.openWrite(Kshatriya.toGPIOPin(Kshatriya.loGPIOPinAble)(Kshatriya.Lo.value))(false)();
    GPIO.listen(Kshatriya.toGPIOPin(Kshatriya.loSigGPIOPinAble)(Kshatriya.LoSig.value))(pinCallback)();
    return GPIO.sleep(10000)();
};
module.exports = {
    main: main, 
    pinCallback: pinCallback
};
