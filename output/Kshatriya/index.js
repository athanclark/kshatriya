// Generated by purs version 0.11.6
"use strict";
var GPIO = require("../GPIO");
var Prelude = require("../Prelude");
var WheelSig = (function () {
    function WheelSig() {

    };
    WheelSig.value = new WheelSig();
    return WheelSig;
})();
var TurnSigL = (function () {
    function TurnSigL() {

    };
    TurnSigL.value = new TurnSigL();
    return TurnSigL;
})();
var TurnSigR = (function () {
    function TurnSigR() {

    };
    TurnSigR.value = new TurnSigR();
    return TurnSigR;
})();
var TurnL = (function () {
    function TurnL() {

    };
    TurnL.value = new TurnL();
    return TurnL;
})();
var TurnR = (function () {
    function TurnR() {

    };
    TurnR.value = new TurnR();
    return TurnR;
})();
var LoSig = (function () {
    function LoSig() {

    };
    LoSig.value = new LoSig();
    return LoSig;
})();
var Lo = (function () {
    function Lo() {

    };
    Lo.value = new Lo();
    return Lo;
})();
var BrakeSigL = (function () {
    function BrakeSigL() {

    };
    BrakeSigL.value = new BrakeSigL();
    return BrakeSigL;
})();
var BrakeSigR = (function () {
    function BrakeSigR() {

    };
    BrakeSigR.value = new BrakeSigR();
    return BrakeSigR;
})();
var BrakeL = (function () {
    function BrakeL() {

    };
    BrakeL.value = new BrakeL();
    return BrakeL;
})();
var BrakeR = (function () {
    function BrakeR() {

    };
    BrakeR.value = new BrakeR();
    return BrakeR;
})();
var BrakeBoth = (function () {
    function BrakeBoth() {

    };
    BrakeBoth.value = new BrakeBoth();
    return BrakeBoth;
})();
var GPIOPinAble = function (toGPIOPin) {
    this.toGPIOPin = toGPIOPin;
};
var wheelSigGPIOPinAble = new GPIOPinAble(function (v) {
    return GPIO.GPIO16.value;
});
var wheelRadius = 0.328;
var turnSigGPIOPinAble = new GPIOPinAble(function (v) {
    if (v instanceof TurnSigL) {
        return GPIO.GPIO26.value;
    };
    if (v instanceof TurnSigR) {
        return GPIO.GPIO20.value;
    };
    throw new Error("Failed pattern match at Kshatriya line 55, column 1 - line 55, column 51: " + [ v.constructor.name ]);
});
var turnGPIOPinAble = new GPIOPinAble(function (v) {
    if (v instanceof TurnL) {
        return GPIO.GPIO17.value;
    };
    if (v instanceof TurnR) {
        return GPIO.GPIO18.value;
    };
    throw new Error("Failed pattern match at Kshatriya line 42, column 1 - line 42, column 45: " + [ v.constructor.name ]);
});
var toGPIOPin = function (dict) {
    return dict.toGPIOPin;
};
var loSigGPIOPinAble = new GPIOPinAble(function (v) {
    return GPIO.GPIO21.value;
});
var loGPIOPinAble = new GPIOPinAble(function (v) {
    return GPIO.GPIO4.value;
});
var brakeSigGPIOPinAble = new GPIOPinAble(function (v) {
    if (v instanceof BrakeSigR) {
        return GPIO.GPIO19.value;
    };
    if (v instanceof BrakeSigL) {
        return GPIO.GPIO6.value;
    };
    throw new Error("Failed pattern match at Kshatriya line 59, column 1 - line 59, column 53: " + [ v.constructor.name ]);
});
var brakeGPIOPinAble = new GPIOPinAble(function (v) {
    if (v instanceof BrakeL) {
        return GPIO.GPIO27.value;
    };
    if (v instanceof BrakeR) {
        return GPIO.GPIO22.value;
    };
    if (v instanceof BrakeBoth) {
        return GPIO.GPIO23.value;
    };
    throw new Error("Failed pattern match at Kshatriya line 46, column 1 - line 46, column 49: " + [ v.constructor.name ]);
});
module.exports = {
    BrakeL: BrakeL, 
    BrakeR: BrakeR, 
    BrakeBoth: BrakeBoth, 
    BrakeSigL: BrakeSigL, 
    BrakeSigR: BrakeSigR, 
    Lo: Lo, 
    LoSig: LoSig, 
    TurnL: TurnL, 
    TurnR: TurnR, 
    TurnSigL: TurnSigL, 
    TurnSigR: TurnSigR, 
    WheelSig: WheelSig, 
    GPIOPinAble: GPIOPinAble, 
    toGPIOPin: toGPIOPin, 
    wheelRadius: wheelRadius, 
    loGPIOPinAble: loGPIOPinAble, 
    turnGPIOPinAble: turnGPIOPinAble, 
    brakeGPIOPinAble: brakeGPIOPinAble, 
    loSigGPIOPinAble: loSigGPIOPinAble, 
    turnSigGPIOPinAble: turnSigGPIOPinAble, 
    brakeSigGPIOPinAble: brakeSigGPIOPinAble, 
    wheelSigGPIOPinAble: wheelSigGPIOPinAble
};
