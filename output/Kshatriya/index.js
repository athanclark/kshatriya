// Generated by purs version 0.11.5
"use strict";
var GPIO = require("../GPIO");
var Prelude = require("../Prelude");
var WheelSig = (function () {
    function WheelSig() {

    };
    WheelSig.value = new WheelSig();
    return WheelSig;
})();
var TurnSigL = (function () {
    function TurnSigL() {

    };
    TurnSigL.value = new TurnSigL();
    return TurnSigL;
})();
var TurnSigR = (function () {
    function TurnSigR() {

    };
    TurnSigR.value = new TurnSigR();
    return TurnSigR;
})();
var TurnL = (function () {
    function TurnL() {

    };
    TurnL.value = new TurnL();
    return TurnL;
})();
var TurnR = (function () {
    function TurnR() {

    };
    TurnR.value = new TurnR();
    return TurnR;
})();
var LoSig = (function () {
    function LoSig() {

    };
    LoSig.value = new LoSig();
    return LoSig;
})();
var Lo = (function () {
    function Lo() {

    };
    Lo.value = new Lo();
    return Lo;
})();
var HornSig = (function () {
    function HornSig() {

    };
    HornSig.value = new HornSig();
    return HornSig;
})();
var Horn = (function () {
    function Horn() {

    };
    Horn.value = new Horn();
    return Horn;
})();
var BrakeSig = (function () {
    function BrakeSig() {

    };
    BrakeSig.value = new BrakeSig();
    return BrakeSig;
})();
var BrakeL = (function () {
    function BrakeL() {

    };
    BrakeL.value = new BrakeL();
    return BrakeL;
})();
var BrakeR = (function () {
    function BrakeR() {

    };
    BrakeR.value = new BrakeR();
    return BrakeR;
})();
var GPIOPinAble = function (toGPIOPin) {
    this.toGPIOPin = toGPIOPin;
};
var wheelSigGPIOPinAble = new GPIOPinAble(function (v) {
    return GPIO.GPIO16.value;
});
var wheelRadius = 0.328;
var turnSigGPIOPinAble = new GPIOPinAble(function (v) {
    if (v instanceof TurnSigL) {
        return GPIO.GPIO26.value;
    };
    if (v instanceof TurnSigR) {
        return GPIO.GPIO20.value;
    };
    throw new Error("Failed pattern match at Kshatriya line 57, column 3 - line 57, column 30: " + [ v.constructor.name ]);
});
var turnGPIOPinAble = new GPIOPinAble(function (v) {
    if (v instanceof TurnL) {
        return GPIO.GPIO17.value;
    };
    if (v instanceof TurnR) {
        return GPIO.GPIO18.value;
    };
    throw new Error("Failed pattern match at Kshatriya line 42, column 3 - line 42, column 27: " + [ v.constructor.name ]);
});
var toGPIOPin = function (dict) {
    return dict.toGPIOPin;
};
var loSigGPIOPinAble = new GPIOPinAble(function (v) {
    return GPIO.GPIO21.value;
});
var loGPIOPinAble = new GPIOPinAble(function (v) {
    return GPIO.GPIO4.value;
});
var hornSigGPIOPinAble = new GPIOPinAble(function (v) {
    return GPIO.GPIO13.value;
});
var hornGPIOPinAble = new GPIOPinAble(function (v) {
    return GPIO.GPIO23.value;
});
var brakeSigGPIOPinAble = new GPIOPinAble(function (v) {
    return GPIO.GPIO19.value;
});
var brakeGPIOPinAble = new GPIOPinAble(function (v) {
    if (v instanceof BrakeL) {
        return GPIO.GPIO27.value;
    };
    if (v instanceof BrakeR) {
        return GPIO.GPIO22.value;
    };
    throw new Error("Failed pattern match at Kshatriya line 46, column 3 - line 46, column 28: " + [ v.constructor.name ]);
});
module.exports = {
    BrakeL: BrakeL, 
    BrakeR: BrakeR, 
    BrakeSig: BrakeSig, 
    Horn: Horn, 
    HornSig: HornSig, 
    Lo: Lo, 
    LoSig: LoSig, 
    TurnL: TurnL, 
    TurnR: TurnR, 
    TurnSigL: TurnSigL, 
    TurnSigR: TurnSigR, 
    WheelSig: WheelSig, 
    GPIOPinAble: GPIOPinAble, 
    toGPIOPin: toGPIOPin, 
    wheelRadius: wheelRadius, 
    loGPIOPinAble: loGPIOPinAble, 
    turnGPIOPinAble: turnGPIOPinAble, 
    brakeGPIOPinAble: brakeGPIOPinAble, 
    hornGPIOPinAble: hornGPIOPinAble, 
    loSigGPIOPinAble: loSigGPIOPinAble, 
    turnSigGPIOPinAble: turnSigGPIOPinAble, 
    brakeSigGPIOPinAble: brakeSigGPIOPinAble, 
    wheelSigGPIOPinAble: wheelSigGPIOPinAble, 
    hornSigGPIOPinAble: hornSigGPIOPinAble
};
